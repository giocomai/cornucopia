[{"path":"https://giocomai.github.io/cornucopia/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 Giorgio Comai Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://giocomai.github.io/cornucopia/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Giorgio Comai. Author, maintainer, copyright holder.","code":""},{"path":"https://giocomai.github.io/cornucopia/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Comai G (2023). cornucopia: cornucopia like funnel keeps giving. R package version 0.0.0.9000, https://giocomai.github.io/cornucopia/.","code":"@Manual{,   title = {cornucopia: A cornucopia is like a funnel that keeps on giving},   author = {Giorgio Comai},   year = {2023},   note = {R package version 0.0.0.9000},   url = {https://giocomai.github.io/cornucopia/}, }"},{"path":"https://giocomai.github.io/cornucopia/index.html","id":"cornucopia-","dir":"","previous_headings":"","what":"A cornucopia is like a funnel that keeps on giving","title":"A cornucopia is like a funnel that keeps on giving","text":"goal cornucopia facilitate reporting sponsored organic activities Facebook, Instagram, LinkedIn (currently), well estimate visualise result marketing funnels (long term).","code":""},{"path":"https://giocomai.github.io/cornucopia/index.html","id":"why-cornucopia","dir":"","previous_headings":"","what":"Why cornucopia?","title":"A cornucopia is like a funnel that keeps on giving","text":"marketing folks, cornucopia like funnel keeps giving. Also known “horn plenty”, ’s basically really wildest dream: funnel endlessly overflows abundance. package called cornucopia? … package automagically turn every funnel cornucopia!* *course , couldn’t resist including impossibly bold claim marketing-focused package.","code":""},{"path":"https://giocomai.github.io/cornucopia/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A cornucopia is like a funnel that keeps on giving","text":"can install development version cornucopia :","code":"remotes::install_github(\"giocomai/cornucopia\")"},{"path":"https://giocomai.github.io/cornucopia/index.html","id":"meta--facebook--instagram","dir":"","previous_headings":"","what":"Meta / Facebook / Instagram","title":"A cornucopia is like a funnel that keeps on giving","text":"order get data Meta ecosystem APIs, need create app ","code":""},{"path":"https://giocomai.github.io/cornucopia/index.html","id":"settings","dir":"","previous_headings":"Meta / Facebook / Instagram","what":"Settings","title":"A cornucopia is like a funnel that keeps on giving","text":"can use cc_set() set start end dates used throughout analysis, well tokens loaded automatically needed cornucopia functions. can get token app page: https://developers.facebook.com/apps/","code":"dates_l <- cc_set(   start_date = \"2023-01-01\",   end_date = Sys.Date() - 1,   fb_user_token = \"looong_string\" )   dates_l"},{"path":"https://giocomai.github.io/cornucopia/index.html","id":"sponsored","dir":"","previous_headings":"Meta / Facebook / Instagram","what":"Sponsored","title":"A cornucopia is like a funnel that keeps on giving","text":"time , cornucopia relies fbRads get data sponsored campaigns store locally. Notice ask lengthy period, may hit API query limit. error message however helpful, apparently complains fields. Just wait try hours: downloaded data default stored local folder nothing lost, queries made missing data. ’re hitting API limits, can set only_cached parameter TRUE, can proceed analysis data ’ll able download data. Notice can customise fields retrieve fields can asked time. See embedded list cc_valid_fields_ad_insights list valid fields, divided broad categories (subdivision made package author, Facebook ). Caching retrieved contents type fields addedt future versions. ad-related information, however, can retrieved endpoint. example, want details creatives used ad, first need make queries retrieve creative_id associated ad (see documentation endpoint), query ad creative endpoint retrieve relevant information creative. first step process, .e. retrieving creative_id can achieved passing vector ad_id cc_get_fb_ad_creatives_id(). Data cached locally default, assuming creatives mostly added time ad created.","code":"token <- \"looooooooooong_string\"  account <- \"00000000000000000\"  fbad_init(   accountid = account,   token = token )  ads_df <- cc_get_fb_ads() ads_df <- cc_get_fb_ads(only_cached = TRUE)"},{"path":"https://giocomai.github.io/cornucopia/index.html","id":"instagram","dir":"","previous_headings":"Meta / Facebook / Instagram","what":"Instagram","title":"A cornucopia is like a funnel that keeps on giving","text":"things related Meta’s API, need app, valid token needed permissions (right permissions frequent problem ’ll find, troubleshooting, take ). first set ig_user_id token. can get basic information profile: just specific fields: order get detailed information posts, first need know ig_media_id. can get id posts following command: mindful may make many queries, Instagram gives result batches 25… thousands media, may take time. Data however cached locally default. can pass resulting ig_media_id cc_get_instagram_media() get information given Instagram post.","code":"cc_set(   ig_user_id = \"00000000000000000\", # probably about 17 digits, not the legacy Instagram id   fb_user_token = \"loooong_string\" ) # the regular token, not the \"page token\" cc_get_instagram_user() cc_get_instagram_user(fields = c(\"username\", \"followers_count\")) cc_get_instagram_media_id() cc_get_instagram_media()"},{"path":"https://giocomai.github.io/cornucopia/index.html","id":"facebook-pages","dir":"","previous_headings":"Meta / Facebook / Instagram","what":"Facebook pages","title":"A cornucopia is like a funnel that keeps on giving","text":"[]","code":""},{"path":"https://giocomai.github.io/cornucopia/index.html","id":"linkedin","dir":"","previous_headings":"","what":"LinkedIn","title":"A cornucopia is like a funnel that keeps on giving","text":"LinkedIn allow exporting statistics pages ads systematically, using one small number ridiculously expensive third party services. complicated independent processing data, well inclusion third party dashboard. deal issues, cornucopia includes set functions facilitates: processing files statistics exported LinkedIn store locally consistent manner keep updated set Google Sheets, order facilitate integration services Looker Studio user just needs download relevant files store folder, without paying attention anything else, really. Files one page can included folder special attention needs dedicated time period included: cornucopia always strive include data longest possible period, always preferring recent data available. reason, usually easiest export data last 365 days, let package deal rest. Export files sorts statics LinkedIn page. file names “pagename_followers_1684688073420.xls”. Throw folder, ’ll call “LinkedIn_stats”. can retrieve basic information files using: allows see file exported, name page, type statistics includes: information can gathered file name. statistics types exported LinkedIn data format, indeed little consistency files, ridiculous insistence including dates ridiculous US date format (month-day-year), matter world. Anyway… can now move specific functions type statistics. following functions parse relevant files merge data preferring recently downloaded data older files (may irrelevant many cases, may well impact statistics associated given post). data, can course process usually . sake post, imagining workflow requires us upload files Google Sheet, order facilitate data retrieval Google Looker Studio. can manually, , course, ’d much rather use set convenience functions process data upload automatically Google Sheet, updating dataset one previously uploaded.","code":"cc_get_linkedin_stats_files(path = \"LinkedIn_stats\") followers_df <- cc_get_linkedin_stats_followers(   path = \"LinkedIn_stats\",   page = \"example-page\" ) cc_drive_upload_linkedin_stats_followers(   path = \"LinkedIn_stats\",   page_name = \"example-page\" )  cc_drive_upload_linkedin_stats_content(   path = \"LinkedIn_stats\",   page_name = \"example-page\" )  cc_drive_upload_linkedin_stats_visitors(   path = \"LinkedIn_stats\",   page_name = \"example-page\" )"},{"path":"https://giocomai.github.io/cornucopia/index.html","id":"disclaimer","dir":"","previous_headings":"","what":"Disclaimer","title":"A cornucopia is like a funnel that keeps on giving","text":"despise ad-tech, ’ve got work .","code":""},{"path":"https://giocomai.github.io/cornucopia/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"A cornucopia is like a funnel that keeps on giving","text":"cornucopia released MIT license.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_api_get_instagram_media.html","id":null,"dir":"Reference","previous_headings":"","what":"Get information about a single media directly from the API. Mostly used\ninternally. — cc_api_get_instagram_media","title":"Get information about a single media directly from the API. Mostly used\ninternally. — cc_api_get_instagram_media","text":"Get information single media directly API. Mostly used internally.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_api_get_instagram_media.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get information about a single media directly from the API. Mostly used\ninternally. — cc_api_get_instagram_media","text":"","code":"cc_api_get_instagram_media(   ig_media_id,   fields = cc_valid_fields_instagram_media_v,   api_version = \"v17.0\",   token = NULL )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_api_get_instagram_media.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get information about a single media directly from the API. Mostly used\ninternally. — cc_api_get_instagram_media","text":"ig_media_id Instagram media identifier, must vector length 1. list identifiers account can retrieved `cc_get_instagram_media_id()`. api_version Defaults \"v17.0\". token Facebook user token (page token).","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_api_get_instagram_media_insights.html","id":null,"dir":"Reference","previous_headings":"","what":"Get information about a single media directly from the API. Mostly used\ninternally. — cc_api_get_instagram_media_insights","title":"Get information about a single media directly from the API. Mostly used\ninternally. — cc_api_get_instagram_media_insights","text":"See official documentation reference: https://developers.facebook.com/docs/instagram-api/reference/ig-media/insights","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_api_get_instagram_media_insights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get information about a single media directly from the API. Mostly used\ninternally. — cc_api_get_instagram_media_insights","text":"","code":"cc_api_get_instagram_media_insights(   ig_media_id,   metrics = NULL,   media_type = NULL,   api_version = \"v17.0\",   ig_user_id = NULL,   token = NULL )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_api_get_instagram_media_insights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get information about a single media directly from the API. Mostly used\ninternally. — cc_api_get_instagram_media_insights","text":"ig_media_id Instagram media identifier, must vector length 1. list identifiers account can retrieved `cc_get_instagram_media_id()`. metrics Metrics retrieved. Consider depending media type, different media types effectively available. Requesting wrong metrics cause error. Defaults NULL. left NULL, metrics chosen based media type. See official documentation reference: https://developers.facebook.com/docs/instagram-api/reference/ig-media/insights media_type Media type. Valid values include \"IMAGE\", \"VIDEO\", \"REELS\", \"CAROUSEL_ALBUM\". Defaults NULL. given, retrieved `cc_get_instagram_media`. Ignored `metrics` explicitly given. api_version Defaults \"v17.0\". ig_user_id Instagram user id, typically composed 17 digits. confused legacy Instragram account id. token Facebook user token (page token).","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_check_instagram_media_update.html","id":null,"dir":"Reference","previous_headings":"","what":"Check when information about Instagram media should be updated based on a simple heuristic — cc_check_instagram_media_update","title":"Check when information about Instagram media should be updated based on a simple heuristic — cc_check_instagram_media_update","text":"Update set TRUE :","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_check_instagram_media_update.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check when information about Instagram media should be updated based on a simple heuristic — cc_check_instagram_media_update","text":"","code":"cc_check_instagram_media_update(   ig_media_id = NULL,   ig_user_id = NULL,   insights = FALSE,   token = NULL )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_check_instagram_media_update.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check when information about Instagram media should be updated based on a simple heuristic — cc_check_instagram_media_update","text":"ig_media_id Instagram media identifier. list identifiers account can retrieved `cc_get_instagram_media_id()`. left NULL, full list automatically retrieved. ig_user_id Instagram user id, typically composed 17 digits. confused legacy Instragram account id. token Facebook user token (page token).","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_check_instagram_media_update.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check when information about Instagram media should be updated based on a simple heuristic — cc_check_instagram_media_update","text":"tibble four columns: `ig_media_id` (character column),   `date_created` `date_retrieved` (Date columns), `update` column   (logical)","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_check_instagram_media_update.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check when information about Instagram media should be updated based on a simple heuristic — cc_check_instagram_media_update","text":"- media published last week retrieved today - media published last month retrieved last week - media published last year retrieved last month - media retrieved last year","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_date_to_json.html","id":null,"dir":"Reference","previous_headings":"","what":"Output date in a format that can be passed as custom date to the Facebok API. — cc_date_to_json","title":"Output date in a format that can be passed as custom date to the Facebok API. — cc_date_to_json","text":"Output date format can passed custom date Facebok API.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_date_to_json.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Output date in a format that can be passed as custom date to the Facebok API. — cc_date_to_json","text":"","code":"cc_date_to_json(start_date, end_date = NULL)"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_date_to_json.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Output date in a format that can be passed as custom date to the Facebok API. — cc_date_to_json","text":"start_date date. end_date Defaults NULL. left NULL, `end_date` assumed start date","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_drive_upload_linkedin_stats_content.html","id":null,"dir":"Reference","previous_headings":"","what":"Upload to Google Sheets Metrics statistics exported from LinkedIn — cc_drive_upload_linkedin_stats_content","title":"Upload to Google Sheets Metrics statistics exported from LinkedIn — cc_drive_upload_linkedin_stats_content","text":"Upload Google Sheets Metrics statistics exported LinkedIn","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_drive_upload_linkedin_stats_content.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upload to Google Sheets Metrics statistics exported from LinkedIn — cc_drive_upload_linkedin_stats_content","text":"","code":"cc_drive_upload_linkedin_stats_content(   path,   page_name,   sheet_dribble = NULL,   base_dribble = NULL,   export_csv = FALSE )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_drive_upload_linkedin_stats_content.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upload to Google Sheets Metrics statistics exported from LinkedIn — cc_drive_upload_linkedin_stats_content","text":"path Base path xls files exported LinkedIn stored. page_name Name page. unsure exact form, see relevant column `cc_get_linkedin_stats_files()` sheet_dribble Dribble specific sheet files uploaded. base_dribble Dribble folder relevant sheet expected . export_csv Defaults TRUE. TRUE, exports content stats csv file folder name base path, \"_processed\" appended.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_drive_upload_linkedin_stats_followers.html","id":null,"dir":"Reference","previous_headings":"","what":"Upload to Google Sheets New Followers statistics exported from LinkedIn — cc_drive_upload_linkedin_stats_followers","title":"Upload to Google Sheets New Followers statistics exported from LinkedIn — cc_drive_upload_linkedin_stats_followers","text":"Upload Google Sheets New Followers statistics exported LinkedIn","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_drive_upload_linkedin_stats_followers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upload to Google Sheets New Followers statistics exported from LinkedIn — cc_drive_upload_linkedin_stats_followers","text":"","code":"cc_drive_upload_linkedin_stats_followers(   path,   page_name,   sheet_dribble = NULL,   base_dribble = NULL,   export_csv = FALSE )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_drive_upload_linkedin_stats_followers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upload to Google Sheets New Followers statistics exported from LinkedIn — cc_drive_upload_linkedin_stats_followers","text":"path Base path xls files exported LinkedIn stored. page_name Name page. unsure exact form, see relevant column `cc_get_linkedin_stats_files()` sheet_dribble Dribble specific sheet files uploaded. base_dribble Dribble folder relevant sheet expected . export_csv Defaults TRUE. TRUE, exports follower stats csv file folder name base path, \"_processed\" appended.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_drive_upload_linkedin_stats_visitors.html","id":null,"dir":"Reference","previous_headings":"","what":"Upload to Google Sheets Visitor metrics statistics exported from LinkedIn — cc_drive_upload_linkedin_stats_visitors","title":"Upload to Google Sheets Visitor metrics statistics exported from LinkedIn — cc_drive_upload_linkedin_stats_visitors","text":"Upload Google Sheets Visitor metrics statistics exported LinkedIn","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_drive_upload_linkedin_stats_visitors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upload to Google Sheets Visitor metrics statistics exported from LinkedIn — cc_drive_upload_linkedin_stats_visitors","text":"","code":"cc_drive_upload_linkedin_stats_visitors(   path,   page_name,   sheet_dribble = NULL,   base_dribble = NULL,   export_csv = FALSE )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_drive_upload_linkedin_stats_visitors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upload to Google Sheets Visitor metrics statistics exported from LinkedIn — cc_drive_upload_linkedin_stats_visitors","text":"path Base path xls files exported LinkedIn stored. page_name Name page. unsure exact form, see relevant column `cc_get_linkedin_stats_files()` sheet_dribble Dribble specific sheet files uploaded. base_dribble Dribble folder relevant sheet expected . export_csv Defaults TRUE. TRUE, exports visitors stats csv file folder name base path, \"_processed\" appended.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ad_actions_by_day.html","id":null,"dir":"Reference","previous_headings":"","what":"Takes all action results for all days when an ad is active — cc_get_fb_ad_actions_by_day","title":"Takes all action results for all days when an ad is active — cc_get_fb_ad_actions_by_day","text":"Draft: caching returns 25 days ad, paging data retrieval enabled","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ad_actions_by_day.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Takes all action results for all days when an ad is active — cc_get_fb_ad_actions_by_day","text":"","code":"cc_get_fb_ad_actions_by_day(   ad_id = NULL,   type = \"actions\",   cache = TRUE,   only_cached = FALSE,   api_version = \"v17.0\",   ad_account_id = NULL,   token = NULL )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ad_creatives_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Facebook ad creatives id for each ad id — cc_get_fb_ad_creatives_id","title":"Get Facebook ad creatives id for each ad id — cc_get_fb_ad_creatives_id","text":"See: https://developers.facebook.com/docs/marketing-api/reference/adgroup/adcreatives/","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ad_creatives_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Facebook ad creatives id for each ad id — cc_get_fb_ad_creatives_id","text":"","code":"cc_get_fb_ad_creatives_id(   ad_id = NULL,   ad_account_id = NULL,   api_version = \"v17.0\",   cache = TRUE,   token = NULL )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ad_creatives_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Facebook ad creatives id for each ad id — cc_get_fb_ad_creatives_id","text":"data frame three character columns: `ad_id`, `creative_id`, `timestamp_retrieved`","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ad_custom.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — cc_get_fb_ad_custom","title":"Title — cc_get_fb_ad_custom","text":"https://developers.facebook.com/docs/marketing-api/reference/ad-campaign-stats/","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ad_custom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — cc_get_fb_ad_custom","text":"","code":"cc_get_fb_ad_custom(   start_date = NULL,   end_date = NULL,   only_cached = FALSE,   api_version = \"v17.0\",   cache = TRUE,   ad_account_id = NULL,   token = NULL )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ad_custom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — cc_get_fb_ad_custom","text":"token","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ad_custom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Title — cc_get_fb_ad_custom","text":"attribution window https://developers.facebook.com/docs/marketing-api/reference/ads-action-stats/","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ad_spend_totals_by_day_by_campaign.html","id":null,"dir":"Reference","previous_headings":"","what":"Get total Facebook ad spending per day by campaign and as a rolling average — cc_get_fb_ad_spend_totals_by_day_by_campaign","title":"Get total Facebook ad spending per day by campaign and as a rolling average — cc_get_fb_ad_spend_totals_by_day_by_campaign","text":"Get total Facebook ad spending per day campaign rolling average","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ad_spend_totals_by_day_by_campaign.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get total Facebook ad spending per day by campaign and as a rolling average — cc_get_fb_ad_spend_totals_by_day_by_campaign","text":"","code":"cc_get_fb_ad_spend_totals_by_day_by_campaign(   ads_df = NULL,   start_date = NULL,   end_date = NULL,   before = 3,   after = 3 )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ad_spend_totals_by_day_by_campaign.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get total Facebook ad spending per day by campaign and as a rolling average — cc_get_fb_ad_spend_totals_by_day_by_campaign","text":"ads_df data frame, one retrieved `cc_get_fb_ads()` start_date Defaults 91 days today end_date Defaults yesterday. Defaults 3. Days keep given day calculating rolling averages. Defaults 3. Days keep given day calculating rolling averages.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ad_spend_totals_by_day_by_objective.html","id":null,"dir":"Reference","previous_headings":"","what":"Get total Facebook ad spending per day by objective and as a rolling average — cc_get_fb_ad_spend_totals_by_day_by_objective","title":"Get total Facebook ad spending per day by objective and as a rolling average — cc_get_fb_ad_spend_totals_by_day_by_objective","text":"Get total Facebook ad spending per day objective rolling average","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ad_spend_totals_by_day_by_objective.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get total Facebook ad spending per day by objective and as a rolling average — cc_get_fb_ad_spend_totals_by_day_by_objective","text":"","code":"cc_get_fb_ad_spend_totals_by_day_by_objective(   ads_df = NULL,   start_date = NULL,   end_date = NULL,   before = 3,   after = 3 )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ad_spend_totals_by_day_by_objective.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get total Facebook ad spending per day by objective and as a rolling average — cc_get_fb_ad_spend_totals_by_day_by_objective","text":"ads_df data frame, one retrieved `cc_get_fb_ads()` start_date Defaults 91 days today end_date Defaults yesterday. Defaults 3. Days keep given day calculating rolling averages. Defaults 3. Days keep given day calculating rolling averages.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ads.html","id":null,"dir":"Reference","previous_headings":"","what":"Get details about Facebook ads — cc_get_fb_ads","title":"Get details about Facebook ads — cc_get_fb_ads","text":"Caches data folder `fb_ads_by_date_rds` current working directory.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get details about Facebook ads — cc_get_fb_ads","text":"","code":"cc_get_fb_ads(   start_date = NULL,   end_date = NULL,   only_cached = FALSE,   fields = c(\"campaign_name\", \"campaign_id\", \"adset_name\", \"adset_id\", \"ad_name\",     \"ad_id\", \"objective\", \"account_currency\", \"spend\", \"actions\", \"action_values\",     \"cost_per_action_type\", \"cost_per_unique_action_type\", \"conversions\",     \"cost_per_conversion\", \"conversion_rate_ranking\", \"cpc\", \"cpm\", \"cpp\", \"ctr\",     \"frequency\", \"reach\") )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get details about Facebook ads — cc_get_fb_ads","text":"only_cached Defaults FALSE. TRUE, pre-cached files within given date range loaded; new calls API made reliably works offline.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get details about Facebook ads — cc_get_fb_ads","text":"data frame extensive number fields, presented   nested data frames.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ads.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get details about Facebook ads — cc_get_fb_ads","text":"See also `cc_get_fb_ads_by_date()` customisation fields. valid fields, see: https://developers.facebook.com/docs/marketing-api/reference/adgroup/insights/","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ads.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get details about Facebook ads — cc_get_fb_ads","text":"","code":"if (FALSE) { cc_get_fb_ads() }"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ads_by_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Facebook ads by date and store them locally — cc_get_fb_ads_by_date","title":"Get Facebook ads by date and store them locally — cc_get_fb_ads_by_date","text":"Get Facebook ads date store locally","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ads_by_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Facebook ads by date and store them locally — cc_get_fb_ads_by_date","text":"","code":"cc_get_fb_ads_by_date(   date,   fields = c(\"campaign_name\", \"campaign_id\", \"adset_name\", \"adset_id\", \"ad_name\",     \"ad_id\", \"objective\", \"account_currency\", \"spend\", \"actions\", \"action_values\",     \"cost_per_action_type\", \"cost_per_unique_action_type\", \"conversions\",     \"cost_per_conversion\", \"conversion_rate_ranking\", \"cpc\", \"cpm\", \"cpp\", \"ctr\",     \"frequency\", \"reach\") )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ads_by_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Facebook ads by date and store them locally — cc_get_fb_ads_by_date","text":"date vector dates.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ads_totals_by_day.html","id":null,"dir":"Reference","previous_headings":"","what":"Get total Facebook ad spending per day and as a rolling average — cc_get_fb_ads_totals_by_day","title":"Get total Facebook ad spending per day and as a rolling average — cc_get_fb_ads_totals_by_day","text":"Get total Facebook ad spending per day rolling average","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ads_totals_by_day.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get total Facebook ad spending per day and as a rolling average — cc_get_fb_ads_totals_by_day","text":"","code":"cc_get_fb_ads_totals_by_day(   ads_df = NULL,   start_date = NULL,   end_date = NULL,   before = 3,   after = 3 )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ads_totals_by_day.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get total Facebook ad spending per day and as a rolling average — cc_get_fb_ads_totals_by_day","text":"ads_df data frame, one retrieved `cc_get_fb_ads()` start_date Defaults 91 days today end_date Defaults yesterday. Defaults 3. Days keep given day calculating rolling averages. Defaults 3. Days keep given day calculating rolling averages.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_owned_product_catalogs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get information about your Facebook product catalogs — cc_get_fb_owned_product_catalogs","title":"Get information about your Facebook product catalogs — cc_get_fb_owned_product_catalogs","text":"See relevant page documentation available fields details https://developers.facebook.com/docs/marketing-api/reference/product-catalog","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_owned_product_catalogs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get information about your Facebook product catalogs — cc_get_fb_owned_product_catalogs","text":"","code":"cc_get_fb_owned_product_catalogs(   fb_business_id = NULL,   api_version = \"v17.0\",   fields = c(\"id\", \"business\", \"commerce_merchant_settings\", \"da_display_settings\",     \"default_image_url\", \"fallback_image_url\", \"feed_count\", \"is_catalog_segment\",     \"name\", \"product_count\", \"vertical\"),   token = NULL )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_owned_product_catalogs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get information about your Facebook product catalogs — cc_get_fb_owned_product_catalogs","text":"fb_business_id Facebook business id. details find , see https://www.facebook.com/business/help/1181250022022158 api_version Defaults \"v17.0\". fields Defaults available. token Facebook user token (page token).","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_owned_product_catalogs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get information about your Facebook product catalogs — cc_get_fb_owned_product_catalogs","text":"","code":"if (FALSE) { cc_get_fb_owned_product_catalogs() }"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_products.html","id":null,"dir":"Reference","previous_headings":"","what":"Get information about a Facebook catalog products — cc_get_fb_products","title":"Get information about a Facebook catalog products — cc_get_fb_products","text":"Data cached locally.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_products.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get information about a Facebook catalog products — cc_get_fb_products","text":"","code":"cc_get_fb_products(   fb_product_catalog_id = NULL,   fields = cc_valid_fields_fb_product,   api_version = \"v17.0\",   max_pages = NULL,   token = NULL )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_products.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get information about a Facebook catalog products — cc_get_fb_products","text":"data frame. columns include nested data.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_products.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get information about a Facebook catalog products — cc_get_fb_products","text":"","code":"if (FALSE) { cc_get_fb_products() }"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_instagram_media.html","id":null,"dir":"Reference","previous_headings":"","what":"Get details about a given Instagram post based on its ig_media_id — cc_get_instagram_media","title":"Get details about a given Instagram post based on its ig_media_id — cc_get_instagram_media","text":"retrieves requested fields APIs introduces adjustments:","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_instagram_media.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get details about a given Instagram post based on its ig_media_id — cc_get_instagram_media","text":"","code":"cc_get_instagram_media(   ig_media_id = NULL,   fields = cc_valid_fields_instagram_media_v,   api_version = \"v17.0\",   ig_user_id = NULL,   update = TRUE,   cache = TRUE,   token = NULL )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_instagram_media.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get details about a given Instagram post based on its ig_media_id — cc_get_instagram_media","text":"ig_media_id Instagram media identifier. list identifiers account can retrieved `cc_get_instagram_media_id()`. left NULL, full list automatically retrieved. api_version Defaults \"v17.0\". ig_user_id Instagram user id, typically composed 17 digits. confused legacy Instragram account id. token Facebook user token (page token).","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_instagram_media.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get details about a given Instagram post based on its ig_media_id — cc_get_instagram_media","text":"- always include media id, column named `ig_media_id` - field `owner` included, outputs result character vector (one owner, separated ;) - adds `timestamp_retrieved` column, ISO 8601-formatted creation date UTC - ensures output always included requested fields, valid; e.g. `is_shared_to_feed` `media_url` may omitted API (see documentation) function always includes relevant column (returns NA value value given) - valid fields given API endpoint always requested cached locally; requested fields effectively returned (`ig_media_id` `timestamp_retrieved` always included first last column) details, see: https://developers.facebook.com/docs/instagram-api/reference/ig-media","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_instagram_media.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get details about a given Instagram post based on its ig_media_id — cc_get_instagram_media","text":"","code":"if (FALSE) { cc_get_instagram_media() }"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_instagram_media_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Get identifiers of all media published on a profile — cc_get_instagram_media_id","title":"Get identifiers of all media published on a profile — cc_get_instagram_media_id","text":"Get identifiers media published profile","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_instagram_media_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get identifiers of all media published on a profile — cc_get_instagram_media_id","text":"","code":"cc_get_instagram_media_id(   ig_user_id = NULL,   api_version = \"v17.0\",   token = NULL,   max_pages = NULL,   cache = TRUE )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_instagram_media_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get identifiers of all media published on a profile — cc_get_instagram_media_id","text":"ig_user_id Instagram user id, typically composed 17 digits. confused legacy Instragram account id. api_version Defaults \"v17.0\". token Facebook user token (page token). max_pages Defaults NULL. given, retrieves number media calculates max number pages needed. Hard-coded max number pages 1000.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_instagram_media_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get identifiers of all media published on a profile — cc_get_instagram_media_id","text":"tibble one column named `ig_media_id` identifiers Instagram media.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_instagram_media_insights.html","id":null,"dir":"Reference","previous_headings":"","what":"Get insights about a given Instagram post based on its ig_media_id — cc_get_instagram_media_insights","title":"Get insights about a given Instagram post based on its ig_media_id — cc_get_instagram_media_insights","text":"retrieves requested fields APIs introduces adjustments:","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_instagram_media_insights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get insights about a given Instagram post based on its ig_media_id — cc_get_instagram_media_insights","text":"","code":"cc_get_instagram_media_insights(   ig_media_id = NULL,   metrics = NULL,   api_version = \"v17.0\",   ig_user_id = NULL,   cache = TRUE,   update = TRUE,   token = NULL )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_instagram_media_insights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get insights about a given Instagram post based on its ig_media_id — cc_get_instagram_media_insights","text":"ig_media_id Instagram media identifier. list identifiers account can retrieved `cc_get_instagram_media_id()`. left NULL, full list automatically retrieved. api_version Defaults \"v17.0\". ig_user_id Instagram user id, typically composed 17 digits. confused legacy Instragram account id. token Facebook user token (page token).","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_instagram_media_insights.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get insights about a given Instagram post based on its ig_media_id — cc_get_instagram_media_insights","text":"- always includes media id, column named `ig_media_id` - always include media type, column named `ig_media_type` - adds `timestamp_retrieved` column, ISO 8601-formatted creation date UTC - ensures output always included requested fields, valid; e.g. `is_shared_to_feed` `media_url` may omitted API (see documentation) function always includes relevant column (returns NA value value given) - valid fields given API endpoint always requested cached locally; requested fields effectively returned (`ig_media_id` `timestamp_retrieved` always included first last column) N.B.: different media types different fields: hence `NA`s columns data unavailable given media type. N.B.: media posted 2017 discarded default, Instagram API throw error earlier posts details, see: https://developers.facebook.com/docs/instagram-api/reference/ig-media/insights","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_instagram_media_insights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get insights about a given Instagram post based on its ig_media_id — cc_get_instagram_media_insights","text":"","code":"if (FALSE) { cc_get_instagram_media_insights() }"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_instagram_user.html","id":null,"dir":"Reference","previous_headings":"","what":"Get information about your Instagram user — cc_get_instagram_user","title":"Get information about your Instagram user — cc_get_instagram_user","text":"See relevant page documentation available fields details https://developers.facebook.com/docs/instagram-api/reference/ig-user","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_instagram_user.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get information about your Instagram user — cc_get_instagram_user","text":"","code":"cc_get_instagram_user(   ig_user_id = NULL,   api_version = \"v17.0\",   fields = c(\"id\", \"ig_id\", \"username\", \"name\", \"biography\", \"website\",     \"followers_count\", \"follows_count\", \"media_count\", \"profile_picture_url\",     \"shopping_product_tag_eligibility\"),   token = NULL )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_instagram_user.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get information about your Instagram user — cc_get_instagram_user","text":"ig_user_id Instagram user id, typically composed 17 digits. confused legacy Instragram account id. api_version Defaults \"v17.0\". fields Defaults available, consider reducing relevant permissions. token Facebook user token (page token).","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_instagram_user.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get information about your Instagram user — cc_get_instagram_user","text":"Look particular permissions requirements. issues, consider dropping `shopping_product_tag_eligibility` fields, requires additional permissions.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_instagram_user.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get information about your Instagram user — cc_get_instagram_user","text":"","code":"if (FALSE) { cc_get_instagram_user() }"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_linkedin_stats_content.html","id":null,"dir":"Reference","previous_headings":"","what":"Get files with content stats exported from LinkedIn — cc_get_linkedin_stats_content","title":"Get files with content stats exported from LinkedIn — cc_get_linkedin_stats_content","text":"N.B. \"Metrics\" sheet processed, sheets give overall statistics, limited relevant time period.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_linkedin_stats_content.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get files with content stats exported from LinkedIn — cc_get_linkedin_stats_content","text":"","code":"cc_get_linkedin_stats_content(path, page_name, export_csv = FALSE)"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_linkedin_stats_content.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get files with content stats exported from LinkedIn — cc_get_linkedin_stats_content","text":"path Base path xls files exported LinkedIn stored. page_name Name page. unsure exact form, see relevant column `cc_get_linkedin_stats_files()` export_csv Defaults TRUE. TRUE, exports content stats csv file folder name base path, \"_processed\" appended.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_linkedin_stats_content.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get files with content stats exported from LinkedIn — cc_get_linkedin_stats_content","text":"data frame.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_linkedin_stats_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Return a tibble with details about all the stats files exported from LinkedIn\nPages — cc_get_linkedin_stats_files","title":"Return a tibble with details about all the stats files exported from LinkedIn\nPages — cc_get_linkedin_stats_files","text":"Provide path local folder bunch files names \"pagename_followers_1684688073420.xls\" stored. path scanned recursively tidy data framre returned, including columns name page, type stats included file, well date data exported.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_linkedin_stats_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return a tibble with details about all the stats files exported from LinkedIn\nPages — cc_get_linkedin_stats_files","text":"","code":"cc_get_linkedin_stats_files(path)"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_linkedin_stats_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return a tibble with details about all the stats files exported from LinkedIn\nPages — cc_get_linkedin_stats_files","text":"path path folder scanned recursively","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_linkedin_stats_followers.html","id":null,"dir":"Reference","previous_headings":"","what":"Get files with follower stats exported from LinkedIn — cc_get_linkedin_stats_followers","title":"Get files with follower stats exported from LinkedIn — cc_get_linkedin_stats_followers","text":"N.B. \"New followers\" sheet processed, sheets give overall statistics, limited relevant time period.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_linkedin_stats_followers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get files with follower stats exported from LinkedIn — cc_get_linkedin_stats_followers","text":"","code":"cc_get_linkedin_stats_followers(path, page_name, export_csv = FALSE)"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_linkedin_stats_followers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get files with follower stats exported from LinkedIn — cc_get_linkedin_stats_followers","text":"path Base path xls files exported LinkedIn stored. page_name Name page. unsure exact form, see relevant column `cc_get_linkedin_stats_files()` export_csv Defaults TRUE. TRUE, exports follower stats csv file folder name base path, \"_processed\" appended.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_linkedin_stats_followers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get files with follower stats exported from LinkedIn — cc_get_linkedin_stats_followers","text":"data frame.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_linkedin_stats_visitors.html","id":null,"dir":"Reference","previous_headings":"","what":"Get files with visitors stats exported from LinkedIn — cc_get_linkedin_stats_visitors","title":"Get files with visitors stats exported from LinkedIn — cc_get_linkedin_stats_visitors","text":"N.B. \"Metrics\" sheet processed, sheets give overall statistics, limited relevant time period.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_linkedin_stats_visitors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get files with visitors stats exported from LinkedIn — cc_get_linkedin_stats_visitors","text":"","code":"cc_get_linkedin_stats_visitors(path, page_name, export_csv = FALSE)"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_linkedin_stats_visitors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get files with visitors stats exported from LinkedIn — cc_get_linkedin_stats_visitors","text":"path Base path xls files exported LinkedIn stored. page_name Name page. unsure exact form, see relevant column `cc_get_linkedin_stats_files()` export_csv Defaults TRUE. TRUE, exports visitors stats csv file folder name base path, \"_processed\" appended.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_linkedin_stats_visitors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get files with visitors stats exported from LinkedIn — cc_get_linkedin_stats_visitors","text":"data frame.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_settings.html","id":null,"dir":"Reference","previous_headings":"","what":"Set default start and end dates — cc_get_settings","title":"Set default start and end dates — cc_get_settings","text":"Set default start end dates","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_settings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set default start and end dates — cc_get_settings","text":"","code":"cc_get_settings(   start_date = NULL,   end_date = NULL,   fb_user_token = NULL,   fb_page_token = NULL,   fb_business_id = NULL,   fb_ad_account_id = NULL,   fb_product_catalog_id = NULL,   ig_user_id = NULL )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_settings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set default start and end dates — cc_get_settings","text":"start_date Defaults 91 days today end_date Defaults yesterday.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_settings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set default start and end dates — cc_get_settings","text":"list two named elements class \"Date\", `start_date` `end_date`","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_settings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set default start and end dates — cc_get_settings","text":"","code":"# \\donttest{ if (interactive()) {   dates_l <- cc_get_settings()   dates_l } # }"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_nomnoml.html","id":null,"dir":"Reference","previous_headings":"","what":"Show ad campaign structure in a nomnmonl graph — cc_nomnoml","title":"Show ad campaign structure in a nomnmonl graph — cc_nomnoml","text":"Show ad campaign structure nomnmonl graph","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_nomnoml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show ad campaign structure in a nomnmonl graph — cc_nomnoml","text":"","code":"cc_nomnoml(ads_df, direction = \"right\", drop_vertical_bar = FALSE, ...)"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_nomnoml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show ad campaign structure in a nomnmonl graph — cc_nomnoml","text":"direction Defaults \"right\". Can \"\". Passed `nomnoml`. drop_vertical_bar Defaults FALSE. TRUE, replaces vertical bar (`nomnoml` can used separate block subsections) \"-\". ...","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_read_fb_ads_by_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Reads locally stored dated files, typically generated with `cc_get_fb_ads_by_date` — cc_read_fb_ads_by_date","title":"Reads locally stored dated files, typically generated with `cc_get_fb_ads_by_date` — cc_read_fb_ads_by_date","text":"Reads locally stored dated files, typically generated `cc_get_fb_ads_by_date`","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_read_fb_ads_by_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reads locally stored dated files, typically generated with `cc_get_fb_ads_by_date` — cc_read_fb_ads_by_date","text":"","code":"cc_read_fb_ads_by_date(   path = \"fb_ads_by_date_rds\",   start_date = NULL,   end_date = NULL )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_read_fb_ads_by_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reads locally stored dated files, typically generated with `cc_get_fb_ads_by_date` — cc_read_fb_ads_by_date","text":"path Path dated files start_date Defaults NULL. given, files retrieved date later included. Input date class, YYYY-MM-DD format. end_date Defaults NULL. given, files retrieved date sooner included. Input date class, YYYY-MM-DD format.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_read_fb_ads_by_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reads locally stored dated files, typically generated with `cc_get_fb_ads_by_date` — cc_read_fb_ads_by_date","text":"","code":"if (FALSE) { if (interactive()) {   cc_read_fb_ads_by_date() } }"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Set default start and end dates — cc_set","title":"Set default start and end dates — cc_set","text":"Set default start end dates","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set default start and end dates — cc_set","text":"","code":"cc_set(   start_date = NULL,   end_date = NULL,   fb_user_token = NULL,   fb_page_token = NULL,   fb_business_id = NULL,   fb_ad_account_id = NULL,   fb_product_catalog_id = NULL,   ig_user_id = NULL )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set default start and end dates — cc_set","text":"start_date Defaults 91 days today end_date Defaults yesterday. fb_business_id Facebook business id. details find , see https://www.facebook.com/business/help/1181250022022158","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set default start and end dates — cc_set","text":"list two named elements class \"Date\", `start_date` `end_date`","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set default start and end dates — cc_set","text":"","code":"# \\donttest{ if (interactive()) {   dates_l <- cc_set()   dates_l } # }"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_valid_fields_ad_insights.html","id":null,"dir":"Reference","previous_headings":"","what":"A list with all valid fields for the Ad Insights Marketing API — cc_valid_fields_ad_insights","title":"A list with all valid fields for the Ad Insights Marketing API — cc_valid_fields_ad_insights","text":"fields requested time, grouped according thematic scope named list. division formalised official API, named list liberally built package author. actual contents fiels immediately obvious clearly described official documentation may misplaced fully tested. Fields may repeated relevant. `ad_id` included lists can used matching.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_valid_fields_ad_insights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A list with all valid fields for the Ad Insights Marketing API — cc_valid_fields_ad_insights","text":"","code":"cc_valid_fields_ad_insights"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_valid_fields_ad_insights.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A list with all valid fields for the Ad Insights Marketing API — cc_valid_fields_ad_insights","text":"## `cc_valid_fields_ad_insights` named list valid fields Ad Insights. about_the_account Retrieves information ad account. separate clearly ad account, probably need request information every call. about_the_ad Retrieves information given ad. Logically, need requested per ad , e.g. daily basis remain unchanged ad. about_the_ad_timing Retrieves information timing given ad, started, ended, etc. also need requested per ad, may need updated ad still running.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_valid_fields_ad_insights.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A list with all valid fields for the Ad Insights Marketing API — cc_valid_fields_ad_insights","text":"<https://developers.facebook.com/docs/marketing-api/reference/adgroup/insights/>","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/run_app.html","id":null,"dir":"Reference","previous_headings":"","what":"Run the Shiny Application — run_app","title":"Run the Shiny Application — run_app","text":"Run Shiny Application","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/run_app.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run the Shiny Application — run_app","text":"","code":"run_app(   onStart = NULL,   options = list(),   enableBookmarking = NULL,   uiPattern = \"/\",   ... )"},{"path":"https://giocomai.github.io/cornucopia/reference/run_app.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run the Shiny Application — run_app","text":"onStart function called app actually run. needed shinyAppObj, since shinyAppDir case, global.R file can used purpose. options Named options passed runApp call (can following: \"port\", \"launch.browser\", \"host\", \"quiet\", \"display.mode\" \"test.mode\"). can also specify width height parameters provide hint embedding environment ideal height/width app. enableBookmarking Can one \"url\", \"server\", \"disable\". default value, NULL, respect setting previous calls  enableBookmarking(). See enableBookmarking() information bookmarking app. uiPattern regular expression applied GET request determine whether ui used handle request. Note entire request path must match regular expression order match considered successful. ... arguments pass golem_opts. See `?golem::get_golem_options` details.","code":""},{"path":"https://giocomai.github.io/cornucopia/news/index.html","id":"cornucopia-0009000","dir":"Changelog","previous_headings":"","what":"cornucopia 0.0.0.9000","title":"cornucopia 0.0.0.9000","text":"Added NEWS.md file track changes package. Basic functions working Instagram API Systematically update upload LinkedIn exported stats","code":""}]
