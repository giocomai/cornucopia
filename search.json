[{"path":"https://giocomai.github.io/cornucopia/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 Giorgio Comai Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://giocomai.github.io/cornucopia/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Giorgio Comai. Author, maintainer, copyright holder.","code":""},{"path":"https://giocomai.github.io/cornucopia/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Comai G (2025). cornucopia: cornucopia like funnel keeps giving. R package version 0.0.0.9022, https://giocomai.github.io/cornucopia/.","code":"@Manual{,   title = {cornucopia: A cornucopia is like a funnel that keeps on giving},   author = {Giorgio Comai},   year = {2025},   note = {R package version 0.0.0.9022},   url = {https://giocomai.github.io/cornucopia/}, }"},{"path":"https://giocomai.github.io/cornucopia/index.html","id":"cornucopia-","dir":"","previous_headings":"","what":"A cornucopia is like a funnel that keeps on giving","title":"A cornucopia is like a funnel that keeps on giving","text":"goal cornucopia facilitate reporting sponsored organic activities across various platforms, including Facebook, Instagram, (lesser extent, due lack usable API) LinkedIn. networks may added future.","code":""},{"path":"https://giocomai.github.io/cornucopia/index.html","id":"why-call-it-cornucopia","dir":"","previous_headings":"","what":"Why call it cornucopia?","title":"A cornucopia is like a funnel that keeps on giving","text":"marketing folks, cornucopia like funnel keeps giving. Also known “horn plenty”, ’s basically really wildest dream: funnel endlessly overflows abundance. Hence, marketing slogan cornucopia : turn every funnel cornucopia! premise cornucopia ’s plenty small big platforms can used interact API (connect data visualisation data processing platforms) big “social networks”/advertising platforms, ’s really just open source packages r ecosystem openly available space. packages excellent quality, overall ’s steep learning curve joining space, tools enabling beginner-intermediate users look interrelated processes orderly fashion, facilitate routine work advanced users. Long term, purpose cornucopia, currently early stage development. called “social networks” , core, marketing tools, throughout package documentation use language found platform’s website use marketing terms default. Needless say, can used reporting non-profit websites, optimising conversions purchases, etc. Please enjoy cornucopia responsibly.","code":""},{"path":"https://giocomai.github.io/cornucopia/index.html","id":"experimental-package-warning","dir":"","previous_headings":"","what":"Experimental package warning","title":"A cornucopia is like a funnel that keeps on giving","text":", keep mind incomplete fully tested package. currently uses API calls read data, safe use. : tries cache data efficency speed, caching mechanisms may always work, make sure extracted data fit purpose (testing introduced) Also, usual disclaimer: free software comes absolutely warranty.","code":""},{"path":"https://giocomai.github.io/cornucopia/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A cornucopia is like a funnel that keeps on giving","text":"can install development version cornucopia :","code":"remotes::install_github(\"giocomai/cornucopia\")"},{"path":"https://giocomai.github.io/cornucopia/index.html","id":"settings","dir":"","previous_headings":"","what":"Settings","title":"A cornucopia is like a funnel that keeps on giving","text":"can use cc_set() set start end dates used functions, well tokens, user identifiers, caching preferences. can provide many settings like. can also pass parameters individual functions, without using cc_set() . full list parameters can set cc_set(): start_date, end_date, fb_user_token, fb_page_token, fb_page_id, fb_business_id, fb_ad_account_id, fb_product_catalog_id, fb_user_id, ig_user_id, ga_email, ga_property_id","code":"library(\"cornucopia\") dates_l <- cc_set(   start_date = \"2023-01-01\",   end_date = Sys.Date() - 1, )  dates_l$start_date #> [1] \"2023-01-01\""},{"path":"https://giocomai.github.io/cornucopia/index.html","id":"meta--facebook--instagram","dir":"","previous_headings":"","what":"Meta / Facebook / Instagram","title":"A cornucopia is like a funnel that keeps on giving","text":"order get data Meta ecosystem APIs, need create app following procedure Developer platform. can get token app page, adding “Marketing API” (mindful ’re using Facebook “page” rather personal profile, link app page may work… page doesn’t load without meaningful error message; switch back main account, click link). retrieve token, can select permissions: probably want include “ads_read” “read_insights”, read-hence safe, probably don’t want tick “ads_management”, unless really know . can also get token different set options customisation, Facebook’s Graph API explorer. effectively recommended approach, can specific permissions granted user token. don’t get expect, likely permission problem. important: function returns empty result, make sure needed permissions… consider adding even temporarily permissions troubleshoot. examples, want see list pages manage, don’t get result: include pages_show_list permission created token? pages controlled business manager, include business_management permission? Etc. Even … things, however, easy, ’ll need go additional steps get long-lived tokens, Facebook page tokens, etc. - details . Also, mindful Meta APIs always return meaningful error messages, documentation examples… queries work depending type ad (creatives/format/etc.) type organic post (video? , reel? etc.), ’s often trial error involved. broadly, whenever get error message unclear, think creatively wrong: token expired? exceed query limit? include field available endpoint? use wrong identifier (e.g. post id instead video id, vice versa)?","code":""},{"path":"https://giocomai.github.io/cornucopia/index.html","id":"organic---facebook-pages-and-access-tokens","dir":"","previous_headings":"Meta / Facebook / Instagram","what":"Organic - Facebook pages and access tokens","title":"A cornucopia is like a funnel that keeps on giving","text":"Data Facebook pages need accessed Facebook page token, separate Facebook user token. retrieving Facebook user token (mentioned , e.g. Graph API explorer), first step retrieve one’s Facebook user id: use Facebook user id request pages managed Facebook user (including relevant Facebook page token add “access_tokens” fields): page token can used retrieve information given page. may hope things just work ’d see pages run cc_get_fb_managed_pages(). Things, however, may simple, granular permissions. words, need explicitly grant permissions access pages. characteristic Facebook, like move settings around, able add permission Graph Api Explorer (context, see also answer StackOverflow). Select app drop menu, “User Page” dropdown select: “Get page access token”. asked re-authenticate, able choose : “Opt current future Pages” select list pages see ’ll permissions list, including pages_show_list pages_read_engagement ads_read read_insights probably want add also pages_read_user_content order retrieve information posts. managing pages business manager, probably enough, need add also business_management permission. Also consider want interact Instagram page associated page also need: instagram_basic instagram_manage_insights remember re-generate token adding permissions actually get access. can run cc_get_fb_managed_pages() get token pages, know ’re looking , can get token specific page follows: now good go. depending created token, may well still using short-lived token. may fine, perhaps really want long-lived token, don’t need constantly retrieve web interfaces. order get long-lived user page token, need first get short-lived user token appropriate authorisations described , input Facebook app id secret, can retrieve app page page. can use long-lived user token get long-lived Facebook page access token. following function get data frame access tokens pages short-lived tokens access (can select just include web interface create short-lived access token).","code":"library(\"cornucopia\") cc_set(fb_user_token = \"actual_token_here\")  cc_get_fb_user() cc_set(fb_user_id = \"actual_user_id_as_retrieved_with_cc_get_fb_user\")  cc_get_fb_managed_pages() # cc_get_fb_managed_pages(fields = c(\"id\", \"name\", \"access_token\")) cc_get_fb_managed_pages()  fb_page_token <- cc_get_fb_page_token(   fb_user_id = cc_get_fb_user(),   page_name = \"My example page\" ) cc_get_fb_long_user_token(   fb_user_token = \"your_short_term_token_here\",   fb_app_id = \"your_fb_app_id_here\",   fb_app_secret = \"your_fb_app_secret_here\" ) cc_get_fb_long_page_token(   fb_user_id = \"your_fb_user_id_here\",   fb_user_token = \"your_long_term_token_here\" )"},{"path":"https://giocomai.github.io/cornucopia/index.html","id":"a-word-of-caution-about-access-tokens","dir":"","previous_headings":"Meta / Facebook / Instagram > Organic - Facebook pages and access tokens","what":"A word of caution about access tokens","title":"A cornucopia is like a funnel that keeps on giving","text":"Store access tokens safely: long-lived user access token expire 60 days, long-lived page access tokens expire. solidly password territory : make sure include tokens scripts share, can used retrieve data, , especially ’re really careful create , sorts things, including posting page creating ads. theory, permissions super-granular, practice, especially pages control Business Manager account, getting right set access place straightforward (maybe, even possible). eventually may end access tokens substantial access: treat treat secret passwords, use care. stage, functions package use read API, access tokens may potentially used APIs. … take care.","code":""},{"path":"https://giocomai.github.io/cornucopia/index.html","id":"using-the-keyring-package-for-storing-tokens-securely","dir":"","previous_headings":"Meta / Facebook / Instagram > Organic - Facebook pages and access tokens","what":"Using the keyring package for storing tokens securely","title":"A cornucopia is like a funnel that keeps on giving","text":"Throughout readme documentation, reference made tokens directly included scripts. mentioned , less ideal, potentially implies tokens stored plain-text scripts, well local history files server logs. convenient much safer approach relies keyring package, allows store tokens using operating system’s credential store. keyring based workflow work. First, go Graph API explorer page ready retrieve Facebook user token, run following command input interactively store operating system’s keyring. Notice fb_user_token just way decide name local keyring: can give whatever name like, add username argument plan use one account. usually need add Facebook user id. following command, can retrieve store relevant id without even seeing console. order add safely Facebook page token, proceed follows. First, get exact name id Facebook page : store relevant page id : retrieve store Facebook page token single command: Now stored tokens local keyring, can include beginning scripts something like , without worring tokens shared involuntarily: sake simplicity, may find readme elsewhere documentation example code may suggest include tokens plaintext: now know keyring better way. warned.","code":"library(\"cornucopia\")  library(\"keyring\")  keyring::key_set(service = \"fb_user_token\") keyring::key_set_with_value(   service = \"fb_user_id\",   password = cc_get_fb_user(     fb_user_token = keyring::key_get(service = \"fb_user_token\")   ) |>     dplyr::pull(id) ) cc_get_fb_managed_pages() keyring::key_set(   service = \"fb_page_id\",   username = \"My example page\" ) keyring::key_set_with_value(   service = \"fb_page_token\",   username = \"My example page\", # use your page name, if you manage more than one page   password = cc_get_fb_page_token(     fb_user_id = keyring::key_get(service = \"fb_user_id\"),     fb_user_token = keyring::key_get(service = \"fb_user_token\"),     page_id = keyring::key_get(       service = \"fb_page_id\",       username = \"My example page\"     )   ) ) cc_set(   fb_user_id = keyring::key_get(service = \"fb_user_id\"),   fb_user_token = keyring::key_get(service = \"fb_user_token\"),   fb_page_token = keyring::key_get(     service = \"fb_page_token\",     username = \"My example page\"   ),   fb_page_id = keyring::key_get(     service = \"fb_page_id\",     username = \"My example page\"   ) )"},{"path":"https://giocomai.github.io/cornucopia/index.html","id":"once-youve-got-your-tokens","dir":"","previous_headings":"Meta / Facebook / Instagram > Organic - Facebook pages and access tokens","what":"Once you’ve got your tokens","title":"A cornucopia is like a funnel that keeps on giving","text":"Now tokens, probably want set let used throughout current session: (prefer, can actively pass token function call, , may rather prefer use solution make sure access tokens included scripts, shared mistake, etc. ) Good, now Facebook Page Token, can use get information page posts, next? (also, mindful token can used also actually post page, treat due caution make sure remains private) , probably want get list posts page. Yes, probably lot posts, function caches result default, , newer posts retrieved, may worth time. don’t want wait just need posts, can retrieve recent posts something like: retrieve recent 10 pages posts (page 25 posts, math). Besides Facebook post id, already get basic information posts, namely: created_time, id, permalink_url, message, full_picture, icon, is_hidden, is_expired, instagram_eligibility, is_eligible_for_promotion, promotable_id, is_instagram_eligible, is_popular, is_published, is_spherical, parent_id, status_type, story, subscribed, sheduled_publish_time, updated_time probably want know . ’s bunch different things can find , vary depending type post. common next step probably get information posts : []","code":"cc_set(   fb_page_token = fb_page_token,   fb_page_id = fb_page_id ) posts_df <- cc_get_fb_page_posts() posts_df <- cc_get_fb_page_posts(   max_pages = 10,   cache = FALSE ) cc_get_fb_page_post_insights() cc_get_fb_page_insights() cc_get_fb_page_video()  cc_get_fb_video_insights()"},{"path":"https://giocomai.github.io/cornucopia/index.html","id":"meta-ads","dir":"","previous_headings":"Meta / Facebook / Instagram","what":"Meta ads","title":"A cornucopia is like a funnel that keeps on giving","text":"time , cornucopia partly relies fbRads get data sponsored campaigns store locally (long terms, API calls done directly cornucopia consistency). Notice ask lengthy period, may hit API query limit. error message however helpful, apparently complains fields. Just wait try hours: downloaded data default stored local folder nothing lost, queries made missing data. ’re hitting API limits proceed writing code wait, can set only_cached parameter TRUE, can proceed analysis data ’ll able download data. Notice can customise fields retrieve fields can asked time. See embedded list cc_valid_fields_ad_insights list valid fields, divided broad categories (subdivision made package author, Facebook ). Caching retrieved contents type fields addedt future versions. ad-related information, however, can retrieved endpoint.","code":"token <- \"looooooooooong_string\"  account <- \"00000000000000000\"  fbad_init(   accountid = account,   token = token )  ads_df <- cc_get_fb_ads() ads_df <- cc_get_fb_ads(only_cached = TRUE)"},{"path":"https://giocomai.github.io/cornucopia/index.html","id":"creatives","dir":"","previous_headings":"Meta / Facebook / Instagram","what":"Creatives","title":"A cornucopia is like a funnel that keeps on giving","text":"example, want details creatives used ad, first need make queries retrieve creative_id associated ad (see documentation endpoint), query ad creative endpoint retrieve relevant information creative. first step process, .e. retrieving creative_id can achieved passing vector ad_id cc_get_fb_ad_creatives_id(). Data cached locally default, assuming creatives mostly added time ad created.","code":""},{"path":"https://giocomai.github.io/cornucopia/index.html","id":"action-breakdowns","dir":"","previous_headings":"Meta / Facebook / Instagram","what":"Action breakdowns","title":"A cornucopia is like a funnel that keeps on giving","text":"’s interesting information, also caching gets trickier. say, interested actions day ad, can use cc_get_fb_ad_actions_by_day, passing vector ad_id (adset_id, matter, APIs don’t seem mind), ’ll get daily breakdown. can get even details: example, want know many viewing video ads sound : many breakdowns, including one, get meaningful breakdown ad relevant. example, example_id ad video, information returned. ask product_id ad based catalogue, won’t get anything. . See official documentation details. Caching really work function stage, consistent approach updating cached data implemented, yet.","code":"cc_get_fb_ad_actions_by_day(   ad_id = example_id,   type = \"actions\",   action_breakdowns = \"action_video_sound\" ) |>   dplyr::filter(is.na(action_video_sound) == FALSE)"},{"path":"https://giocomai.github.io/cornucopia/index.html","id":"instagram","dir":"","previous_headings":"Meta / Facebook / Instagram","what":"Instagram","title":"A cornucopia is like a funnel that keeps on giving","text":"things related Meta’s API, need app, valid token needed permissions (right permissions frequent problem ’ll find, troubleshooting, take ). first set ig_user_id token. , may well case, don’t know ig_user_id can retrieve cc_get_instagram_user_id(), long fb_page_id Facebook page associated given Instagram account fb_user_token (notice, user token, page token). reference, see also step 5 official guide. can get basic information profile: just specific fields: order get detailed information posts, first need know ig_media_id. can get id posts following command: mindful may make many queries, Instagram gives result batches 25… thousands media, may take time. Data however cached locally default. can pass resulting ig_media_id cc_get_instagram_media() get information given Instagram post. Responses cc_get_instagram_media() cached default, updated decreasing frequency posts get older (data refreshed every day last week, week last month, month last year, year previous years). consequence, mostly able keep scripts rely autoaupdate data without much delay.","code":"cc_set(   ig_user_id = \"00000000000000000\", # probably about 17 digits, not the legacy Instagram id   fb_user_token = \"loooong_string\" ) # the regular token, not the \"page token\" cc_get_instagram_user() cc_get_instagram_user(fields = c(\"username\", \"followers_count\")) cc_get_instagram_media_id() cc_get_instagram_media()"},{"path":"https://giocomai.github.io/cornucopia/index.html","id":"retrieve-information-about-other-instagram-users","dir":"","previous_headings":"Meta / Facebook / Instagram","what":"Retrieve information about other Instagram users","title":"A cornucopia is like a funnel that keeps on giving","text":"Instagram Graph APIs allow retrieve information users mechanism known “business discovery”. allows retrieve basic information user (e.g follower count bio, etc.), well posts (e.g. likes count). Using function ’s much easier hit usage limits… usage limits, however, reset one hour, caching waiting can still go long way. example, retrieve information Instagram account United Nation, run:","code":"cc_get_instagram_bd_user(ig_username = \"unitednations\")"},{"path":"https://giocomai.github.io/cornucopia/index.html","id":"retrieve-leads-from-meta-ads","dir":"","previous_headings":"Meta / Facebook / Instagram","what":"Retrieve leads from Meta ads","title":"A cornucopia is like a funnel that keeps on giving","text":"order retrieve leads ad campaigns rely Meta’s native forms, make sure user token right permissions (must include leads_retrieval). must get identifier lead form: can see create , download leads csv single ad, dedicated section ads manager. aware form id matters; leads form retrieved, matter ad set ad included (reference adset ad however included returned data frame along form responses). can course feed data workflows, e.g. uploading Google Sheets googlesheets4, even recurrently, running e.g. script every hour faciliated packages cronR taskscheduleR.","code":"cc_get_fb_leads(form_id = \"insert_form_id_here\")"},{"path":"https://giocomai.github.io/cornucopia/index.html","id":"linkedin","dir":"","previous_headings":"","what":"LinkedIn","title":"A cornucopia is like a funnel that keeps on giving","text":"LinkedIn allow exporting statistics pages ads systematically, using one small number ridiculously expensive third party services. complicated independent processing data, well inclusion third party dashboard. deal issues, cornucopia includes set functions facilitates: processing files statistics exported LinkedIn store locally consistent manner keep updated set Google Sheets, order facilitate integration services Looker Studio user just needs download relevant files store folder, without paying attention anything else, really. Files one page can included folder special attention needs dedicated time period included: cornucopia always strive include data longest possible period, always preferring recent data available. reason, usually easiest export data last 365 days, let package deal rest. Export files sorts statics LinkedIn page. file names “pagename_followers_1684688073420.xls”. Throw folder, ’ll call “LinkedIn_stats”. can retrieve basic information files using: allows see file exported, name page, type statistics includes: information can gathered file name. statistics types exported LinkedIn data format, indeed little consistency files, ridiculous insistence including dates ridiculous US date format (month-day-year), matter world. Anyway… can now move specific functions type statistics. following functions parse relevant files merge data preferring recently downloaded data older files (may irrelevant many cases, may well impact statistics associated given post). data, can course process usually . sake post, imagining workflow requires us upload files Google Sheet, order facilitate data retrieval Google Looker Studio. can manually, , course, ’d much rather use set convenience functions process data upload automatically Google Sheet, updating dataset one previously uploaded.","code":"cc_get_linkedin_stats_files(path = \"LinkedIn_stats\") followers_df <- cc_get_linkedin_stats_followers(   path = \"LinkedIn_stats\",   page = \"example-page\" ) cc_drive_upload_linkedin_stats_followers(   path = \"LinkedIn_stats\",   page_name = \"example-page\" )  cc_drive_upload_linkedin_stats_content(   path = \"LinkedIn_stats\",   page_name = \"example-page\" )  cc_drive_upload_linkedin_stats_visitors(   path = \"LinkedIn_stats\",   page_name = \"example-page\" )"},{"path":"https://giocomai.github.io/cornucopia/index.html","id":"google-analytics","dir":"","previous_headings":"","what":"Google Analytics","title":"A cornucopia is like a funnel that keeps on giving","text":"tentative integration Google Analytics far implemented, relying googleAnalyticsR. interested ratio (possibly, calculated rolling average), consider something following. quick implementation, convenience functions based googleAnalyticsR may introduced, including local caching.","code":"cc_set(   ga_email = \"example@example.com\",   ga_property_id = 123456789 )  cc_get_ga_event_ratio(events = c(\"session_start\", \"purchase\"))  cc_get_ga_event_ratio(   events = c(\"session_start\", \"purchase\"),   rolling = TRUE )"},{"path":"https://giocomai.github.io/cornucopia/index.html","id":"disclaimer","dir":"","previous_headings":"","what":"Disclaimer","title":"A cornucopia is like a funnel that keeps on giving","text":"despise ad-tech, ’ve got work .","code":""},{"path":"https://giocomai.github.io/cornucopia/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"A cornucopia is like a funnel that keeps on giving","text":"cornucopia released MIT license.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_api_get_fb_page_post_insights.html","id":null,"dir":"Reference","previous_headings":"","what":"Get information about a single media directly from the API. Mostly used internally. — cc_api_get_fb_page_post_insights","title":"Get information about a single media directly from the API. Mostly used internally. — cc_api_get_fb_page_post_insights","text":"See official documentation reference:  https://developers.facebook.com/docs/graph-api/reference/insights/#page-posts","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_api_get_fb_page_post_insights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get information about a single media directly from the API. Mostly used internally. — cc_api_get_fb_page_post_insights","text":"","code":"cc_api_get_fb_page_post_insights(   fb_post_id,   metrics = cc_valid_fields_fb_post_insights,   cache = TRUE,   update = TRUE,   api_version = \"v22.0\",   fb_page_id = NULL,   fb_page_token = NULL )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_api_get_fb_page_post_insights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get information about a single media directly from the API. Mostly used internally. — cc_api_get_fb_page_post_insights","text":"fb_post_id Instagram media identifier, must vector length 1. list identifiers account can retrieved `cc_get_fb_page_posts()`. metrics Metrics retrieved. Consider depending media type, different media types effectively available. Requesting wrong metrics cause error. Defaults NULL. left NULL, metrics chosen based media type. See official documentation reference:  https://developers.facebook.com/docs/graph-api/reference/insights/#page-posts cache Defaults TRUE.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_api_get_fb_video_insights.html","id":null,"dir":"Reference","previous_headings":"","what":"Get information about a single Facebook video directly from the API. Mostly used internally. — cc_api_get_fb_video_insights","title":"Get information about a single Facebook video directly from the API. Mostly used internally. — cc_api_get_fb_video_insights","text":"See official documentation reference: https://developers.facebook.com/docs/graph-api/reference/video/video_insights/","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_api_get_fb_video_insights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get information about a single Facebook video directly from the API. Mostly used internally. — cc_api_get_fb_video_insights","text":"","code":"cc_api_get_fb_video_insights(   fb_video_id,   metrics = cc_valid_fields_fb_video_insights,   cache = TRUE,   update = TRUE,   api_version = \"v22.0\",   fb_page_id = NULL,   fb_page_token = NULL )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_api_get_fb_video_insights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get information about a single Facebook video directly from the API. Mostly used internally. — cc_api_get_fb_video_insights","text":"fb_video_id Instagram media identifier, must vector length 1. list identifiers account can retrieved `cc_get_fb_page_video()`. metrics Metrics retrieved. Consider depending media type, different media types effectively available. Requesting wrong metrics cause error. Defaults NULL. left NULL, metrics chosen based media type. See official documentation reference:  https://developers.facebook.com/docs/graph-api/reference/insights/#page-posts fb_page_token","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_api_get_instagram_media.html","id":null,"dir":"Reference","previous_headings":"","what":"Get information about a single media directly from the API. Mostly used internally. — cc_api_get_instagram_media","title":"Get information about a single media directly from the API. Mostly used internally. — cc_api_get_instagram_media","text":"Get information single media directly API. Mostly used internally.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_api_get_instagram_media.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get information about a single media directly from the API. Mostly used internally. — cc_api_get_instagram_media","text":"","code":"cc_api_get_instagram_media(   ig_media_id,   fields = cc_valid_fields_instagram_media_v,   api_version = \"v22.0\",   fb_user_token = NULL )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_api_get_instagram_media.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get information about a single media directly from the API. Mostly used internally. — cc_api_get_instagram_media","text":"ig_media_id Instagram media identifier, must vector length 1. list identifiers account can retrieved `cc_get_instagram_media_id()`. api_version Defaults \"v21.0\". fb_user_token Facebook user token (page token).","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_api_get_instagram_media_insights.html","id":null,"dir":"Reference","previous_headings":"","what":"Get information about a single media directly from the API. Mostly used internally. — cc_api_get_instagram_media_insights","title":"Get information about a single media directly from the API. Mostly used internally. — cc_api_get_instagram_media_insights","text":"See official documentation reference: https://developers.facebook.com/docs/instagram-api/reference/ig-media/insights","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_api_get_instagram_media_insights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get information about a single media directly from the API. Mostly used internally. — cc_api_get_instagram_media_insights","text":"","code":"cc_api_get_instagram_media_insights(   ig_media_id,   metrics = NULL,   media_type = NULL,   api_version = \"v22.0\",   ig_user_id = NULL,   fb_user_token = NULL )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_api_get_instagram_media_insights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get information about a single media directly from the API. Mostly used internally. — cc_api_get_instagram_media_insights","text":"ig_media_id Instagram media identifier, must vector length 1. list identifiers account can retrieved `cc_get_instagram_media_id()`. metrics Metrics retrieved. Consider depending media type, different media types effectively available. Requesting wrong metrics cause error. Defaults NULL. left NULL, metrics chosen based media type. See official documentation reference: https://developers.facebook.com/docs/instagram-api/reference/ig-media/insights media_type Media type. Valid values include \"IMAGE\", \"VIDEO\", \"REELS\", \"CAROUSEL_ALBUM\". Defaults NULL. given, retrieved `cc_get_instagram_media`. Ignored `metrics` explicitly given. api_version Defaults \"v21.0\". ig_user_id Instagram user id, typically composed 17 digits. confused legacy Instagram account id. fb_user_token Facebook user token (page token).","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_check_instagram_media_update.html","id":null,"dir":"Reference","previous_headings":"","what":"Check when information about Instagram media should be updated based on a simple heuristic — cc_check_instagram_media_update","title":"Check when information about Instagram media should be updated based on a simple heuristic — cc_check_instagram_media_update","text":"Update set TRUE :","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_check_instagram_media_update.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check when information about Instagram media should be updated based on a simple heuristic — cc_check_instagram_media_update","text":"","code":"cc_check_instagram_media_update(   ig_media_id = NULL,   ig_user_id = NULL,   insights = FALSE,   fb_user_token = NULL )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_check_instagram_media_update.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check when information about Instagram media should be updated based on a simple heuristic — cc_check_instagram_media_update","text":"ig_media_id Instagram media identifier. list identifiers account can retrieved `cc_get_instagram_media_id()`. left NULL, full list automatically retrieved. ig_user_id Instagram user id, typically composed 17 digits. confused legacy Instagram account id. fb_user_token Facebook user token (page token).","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_check_instagram_media_update.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check when information about Instagram media should be updated based on a simple heuristic — cc_check_instagram_media_update","text":"tibble four columns: `ig_media_id` (character column),   `date_created` `date_retrieved` (Date columns), `update` column   (logical)","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_check_instagram_media_update.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check when information about Instagram media should be updated based on a simple heuristic — cc_check_instagram_media_update","text":"- media published last week retrieved today - media published last month retrieved last week - media published last year retrieved last month - media retrieved last year","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_date_to_json.html","id":null,"dir":"Reference","previous_headings":"","what":"Output date in a format that can be passed as custom date to the Facebok API. — cc_date_to_json","title":"Output date in a format that can be passed as custom date to the Facebok API. — cc_date_to_json","text":"Output date format can passed custom date Facebok API.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_date_to_json.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Output date in a format that can be passed as custom date to the Facebok API. — cc_date_to_json","text":"","code":"cc_date_to_json(start_date, end_date = NULL)"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_date_to_json.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Output date in a format that can be passed as custom date to the Facebok API. — cc_date_to_json","text":"start_date date. end_date Defaults NULL. left NULL, `end_date` assumed start date","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_drive_upload_linkedin_stats_content.html","id":null,"dir":"Reference","previous_headings":"","what":"Upload to Google Sheets Metrics statistics exported from LinkedIn — cc_drive_upload_linkedin_stats_content","title":"Upload to Google Sheets Metrics statistics exported from LinkedIn — cc_drive_upload_linkedin_stats_content","text":"Upload Google Sheets Metrics statistics exported LinkedIn","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_drive_upload_linkedin_stats_content.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upload to Google Sheets Metrics statistics exported from LinkedIn — cc_drive_upload_linkedin_stats_content","text":"","code":"cc_drive_upload_linkedin_stats_content(   path,   page_name,   sheet_dribble = NULL,   base_dribble = NULL,   export_csv = FALSE )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_drive_upload_linkedin_stats_content.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upload to Google Sheets Metrics statistics exported from LinkedIn — cc_drive_upload_linkedin_stats_content","text":"path Base path xls files exported LinkedIn stored. page_name Name page. unsure exact form, see relevant column `cc_get_linkedin_stats_files()` sheet_dribble Dribble specific sheet files uploaded. base_dribble Dribble folder relevant sheet expected . export_csv Defaults TRUE. TRUE, exports content stats csv file folder name base path, \"_processed\" appended.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_drive_upload_linkedin_stats_followers.html","id":null,"dir":"Reference","previous_headings":"","what":"Upload to Google Sheets New Followers statistics exported from LinkedIn — cc_drive_upload_linkedin_stats_followers","title":"Upload to Google Sheets New Followers statistics exported from LinkedIn — cc_drive_upload_linkedin_stats_followers","text":"Upload Google Sheets New Followers statistics exported LinkedIn","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_drive_upload_linkedin_stats_followers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upload to Google Sheets New Followers statistics exported from LinkedIn — cc_drive_upload_linkedin_stats_followers","text":"","code":"cc_drive_upload_linkedin_stats_followers(   path,   page_name,   sheet_dribble = NULL,   base_dribble = NULL,   export_csv = FALSE )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_drive_upload_linkedin_stats_followers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upload to Google Sheets New Followers statistics exported from LinkedIn — cc_drive_upload_linkedin_stats_followers","text":"path Base path xls files exported LinkedIn stored. page_name Name page. unsure exact form, see relevant column `cc_get_linkedin_stats_files()` sheet_dribble Dribble specific sheet files uploaded. base_dribble Dribble folder relevant sheet expected . export_csv Defaults TRUE. TRUE, exports follower stats csv file folder name base path, \"_processed\" appended.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_drive_upload_linkedin_stats_visitors.html","id":null,"dir":"Reference","previous_headings":"","what":"Upload to Google Sheets Visitor metrics statistics exported from LinkedIn — cc_drive_upload_linkedin_stats_visitors","title":"Upload to Google Sheets Visitor metrics statistics exported from LinkedIn — cc_drive_upload_linkedin_stats_visitors","text":"Upload Google Sheets Visitor metrics statistics exported LinkedIn","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_drive_upload_linkedin_stats_visitors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upload to Google Sheets Visitor metrics statistics exported from LinkedIn — cc_drive_upload_linkedin_stats_visitors","text":"","code":"cc_drive_upload_linkedin_stats_visitors(   path,   page_name,   sheet_dribble = NULL,   base_dribble = NULL,   export_csv = FALSE )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_drive_upload_linkedin_stats_visitors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upload to Google Sheets Visitor metrics statistics exported from LinkedIn — cc_drive_upload_linkedin_stats_visitors","text":"path Base path xls files exported LinkedIn stored. page_name Name page. unsure exact form, see relevant column `cc_get_linkedin_stats_files()` sheet_dribble Dribble specific sheet files uploaded. base_dribble Dribble folder relevant sheet expected . export_csv Defaults TRUE. TRUE, exports visitors stats csv file folder name base path, \"_processed\" appended.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_explorer.html","id":null,"dir":"Reference","previous_headings":"","what":"Run the Shiny Application — cc_explorer","title":"Run the Shiny Application — cc_explorer","text":"Run Shiny Application","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_explorer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run the Shiny Application — cc_explorer","text":"","code":"cc_explorer(   start_date = cc_get_settings()[[\"start_date\"]],   end_date = cc_get_settings()[[\"end_date\"]],   fb_user_token = cc_get_settings()[[\"fb_user_token\"]],   fb_page_token = cc_get_settings()[[\"fb_page_token\"]],   fb_page_id = cc_get_settings()[[\"fb_page_id\"]],   fb_business_id = cc_get_settings()[[\"fb_business_id\"]],   fb_ad_account_id = cc_get_settings()[[\"fb_ad_account_id\"]],   fb_product_catalog_id = cc_get_settings()[[\"fb_product_catalog_id\"]],   fb_user_id = cc_get_settings()[[\"fb_user_id\"]],   ig_user_id = cc_get_settings()[[\"ig_user_id\"]],   ig_user_df = NULL,   custom_head_html = \"<meta name=\\\"referrer\\\" content=\\\"no-referrer\\\" />\",   onStart = NULL,   options = list(),   enableBookmarking = NULL,   uiPattern = \"/\",   ... )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_explorer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run the Shiny Application — cc_explorer","text":"start_date Defaults 91 days today end_date Defaults yesterday. fb_user_token Facebook user token (page token). fb_business_id Facebook business id. details find , see https://www.facebook.com/business/help/1181250022022158 custom_head_html Chunk code included app's `<head>`. can used, e.g., custom analytics snippets. default value, `<meta name=\"referrer\" content=\"-referrer\" />` asks browser include source website following links external websites. onStart function called app actually run. needed shinyAppObj, since shinyAppDir case, global.R file can used purpose. options Named options passed runApp call (can following: \"port\", \"launch.browser\", \"host\", \"quiet\", \"display.mode\" \"test.mode\"). can also specify width height parameters provide hint embedding environment ideal height/width app. enableBookmarking Can one \"url\", \"server\", \"disable\". default value, NULL, respect setting previous calls  enableBookmarking(). See enableBookmarking() information bookmarking app. uiPattern regular expression applied GET request determine whether ui used handle request. Note entire request path must match regular expression order match considered successful. ... arguments pass golem_opts. See `?golem::get_golem_options` details.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ad_actions_by_day.html","id":null,"dir":"Reference","previous_headings":"","what":"Takes all action results for all days when an ad is active — cc_get_fb_ad_actions_by_day","title":"Takes all action results for all days when an ad is active — cc_get_fb_ad_actions_by_day","text":"action breakdowns, see: https://developers.facebook.com/docs/marketing-api/insights/breakdowns/","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ad_actions_by_day.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Takes all action results for all days when an ad is active — cc_get_fb_ad_actions_by_day","text":"","code":"cc_get_fb_ad_actions_by_day(   ad_id = NULL,   type = \"actions\",   action_breakdowns = NULL,   cache = FALSE,   only_cached = FALSE,   api_version = \"v22.0\",   ad_account_id = NULL,   fb_user_token = NULL,   max_pages = NULL )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ad_actions_by_day.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Takes all action results for all days when an ad is active — cc_get_fb_ad_actions_by_day","text":"only_cached Defaults FALSE. TRUE, data cached locally retrieved.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ad_actions_by_day.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Takes all action results for all days when an ad is active — cc_get_fb_ad_actions_by_day","text":"Draft: caching disabled default partly functional; yet fully tested ads running longer 25 days","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ad_campaigns.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all campaigns for the current ad account / legacy — cc_get_fb_ad_campaigns","title":"Get all campaigns for the current ad account / legacy — cc_get_fb_ad_campaigns","text":"details fields, see: https://developers.facebook.com/docs/marketing-api/reference/ad-campaign-group/","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ad_campaigns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all campaigns for the current ad account / legacy — cc_get_fb_ad_campaigns","text":"","code":"cc_get_fb_ad_campaigns(   fields = cc_valid_fields_ad_campaign_group_v,   api_version = \"v22.0\",   fb_ad_account_id = NULL,   max_pages = NULL,   fb_user_token = NULL,   cache = TRUE,   update = TRUE )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ad_campaigns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all campaigns for the current ad account / legacy — cc_get_fb_ad_campaigns","text":"fields character vector fields retrieve. Defaults valid fields return single value, see: `cc_valid_fields_ad_campaign_group_v`. Currently default fields supported caching.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ad_campaigns.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get all campaigns for the current ad account / legacy — cc_get_fb_ad_campaigns","text":"currently returns fields return single value, `cc_valid_fields_ad_campaign_group_v` reference, fields always present campaigns: \"id,name,created_time,updated_time,start_time,stop_time,objective,status\" Cache updating currently suboptimal.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ad_campaigns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all campaigns for the current ad account / legacy — cc_get_fb_ad_campaigns","text":"","code":"if (FALSE) { # \\dontrun{ cc_get_fb_ad_campaigns() } # }"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ad_creatives_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Facebook ad creatives id for each ad id — cc_get_fb_ad_creatives_id","title":"Get Facebook ad creatives id for each ad id — cc_get_fb_ad_creatives_id","text":"See: https://developers.facebook.com/docs/marketing-api/reference/adgroup/adcreatives/","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ad_creatives_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Facebook ad creatives id for each ad id — cc_get_fb_ad_creatives_id","text":"","code":"cc_get_fb_ad_creatives_id(   ad_id = NULL,   ad_account_id = NULL,   api_version = \"v22.0\",   cache = TRUE,   fb_user_token = NULL )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ad_creatives_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Facebook ad creatives id for each ad id — cc_get_fb_ad_creatives_id","text":"data frame three character columns: `ad_id`, `creative_id`, `timestamp_retrieved`","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ad_custom.html","id":null,"dir":"Reference","previous_headings":"","what":"Get custom stats about an ad (currently not functional) — cc_get_fb_ad_custom","title":"Get custom stats about an ad (currently not functional) — cc_get_fb_ad_custom","text":"https://developers.facebook.com/docs/marketing-api/reference/ad-campaign-stats/","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ad_custom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get custom stats about an ad (currently not functional) — cc_get_fb_ad_custom","text":"","code":"cc_get_fb_ad_custom(   start_date = NULL,   end_date = NULL,   only_cached = FALSE,   api_version = \"v22.0\",   cache = TRUE,   ad_account_id = NULL,   fb_user_token = NULL )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ad_custom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get custom stats about an ad (currently not functional) — cc_get_fb_ad_custom","text":"attribution window https://developers.facebook.com/docs/marketing-api/reference/ads-action-stats/","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ad_spend_totals_by_day_by_campaign.html","id":null,"dir":"Reference","previous_headings":"","what":"Get total Facebook ad spending per day by campaign and as a rolling average — cc_get_fb_ad_spend_totals_by_day_by_campaign","title":"Get total Facebook ad spending per day by campaign and as a rolling average — cc_get_fb_ad_spend_totals_by_day_by_campaign","text":"Get total Facebook ad spending per day campaign rolling average","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ad_spend_totals_by_day_by_campaign.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get total Facebook ad spending per day by campaign and as a rolling average — cc_get_fb_ad_spend_totals_by_day_by_campaign","text":"","code":"cc_get_fb_ad_spend_totals_by_day_by_campaign(   ads_df = NULL,   start_date = NULL,   end_date = NULL,   before = 3,   after = 3 )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ad_spend_totals_by_day_by_campaign.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get total Facebook ad spending per day by campaign and as a rolling average — cc_get_fb_ad_spend_totals_by_day_by_campaign","text":"ads_df data frame, one retrieved `cc_get_fb_ads()` start_date Defaults 91 days today end_date Defaults yesterday. Defaults 3. Days keep given day calculating rolling averages. Defaults 3. Days keep given day calculating rolling averages.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ad_spend_totals_by_day_by_objective.html","id":null,"dir":"Reference","previous_headings":"","what":"Get total Facebook ad spending per day by objective and as a rolling average — cc_get_fb_ad_spend_totals_by_day_by_objective","title":"Get total Facebook ad spending per day by objective and as a rolling average — cc_get_fb_ad_spend_totals_by_day_by_objective","text":"Get total Facebook ad spending per day objective rolling average","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ad_spend_totals_by_day_by_objective.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get total Facebook ad spending per day by objective and as a rolling average — cc_get_fb_ad_spend_totals_by_day_by_objective","text":"","code":"cc_get_fb_ad_spend_totals_by_day_by_objective(   ads_df = NULL,   start_date = NULL,   end_date = NULL,   before = 3,   after = 3 )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ad_spend_totals_by_day_by_objective.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get total Facebook ad spending per day by objective and as a rolling average — cc_get_fb_ad_spend_totals_by_day_by_objective","text":"ads_df data frame, one retrieved `cc_get_fb_ads()` start_date Defaults 91 days today end_date Defaults yesterday. Defaults 3. Days keep given day calculating rolling averages. Defaults 3. Days keep given day calculating rolling averages.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ads.html","id":null,"dir":"Reference","previous_headings":"","what":"Get details about Facebook ads — cc_get_fb_ads","title":"Get details about Facebook ads — cc_get_fb_ads","text":"Caches data folder `fb_ads_by_date_rds` current working directory.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get details about Facebook ads — cc_get_fb_ads","text":"","code":"cc_get_fb_ads(   start_date = NULL,   end_date = NULL,   only_cached = FALSE,   fields = c(\"campaign_name\", \"campaign_id\", \"adset_name\", \"adset_id\", \"ad_name\",     \"ad_id\", \"objective\", \"account_currency\", \"spend\", \"actions\", \"action_values\",     \"cost_per_action_type\", \"cost_per_unique_action_type\", \"conversions\",     \"cost_per_conversion\", \"conversion_rate_ranking\", \"cpc\", \"cpm\", \"cpp\", \"ctr\",     \"frequency\", \"reach\"),   fb_ad_account_id = NULL )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get details about Facebook ads — cc_get_fb_ads","text":"only_cached Defaults FALSE. TRUE, pre-cached files within given date range loaded; new calls API made reliably works offline.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get details about Facebook ads — cc_get_fb_ads","text":"data frame extensive number fields, presented   nested data frames.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ads.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get details about Facebook ads — cc_get_fb_ads","text":"See also `cc_get_fb_ads_by_date()` customisation fields. valid fields, see: https://developers.facebook.com/docs/marketing-api/reference/adgroup/insights/","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ads.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get details about Facebook ads — cc_get_fb_ads","text":"","code":"if (FALSE) { # \\dontrun{ cc_get_fb_ads() } # }"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ads_by_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Facebook ads by date and store them locally — cc_get_fb_ads_by_date","title":"Get Facebook ads by date and store them locally — cc_get_fb_ads_by_date","text":"Get Facebook ads date store locally","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ads_by_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Facebook ads by date and store them locally — cc_get_fb_ads_by_date","text":"","code":"cc_get_fb_ads_by_date(   date,   fields = c(\"campaign_name\", \"campaign_id\", \"adset_name\", \"adset_id\", \"ad_name\",     \"ad_id\", \"objective\", \"account_currency\", \"spend\", \"actions\", \"action_values\",     \"cost_per_action_type\", \"cost_per_unique_action_type\", \"conversions\",     \"cost_per_conversion\", \"conversion_rate_ranking\", \"cpc\", \"cpm\", \"cpp\", \"ctr\",     \"frequency\", \"reach\"),   fb_ad_account_id = NULL )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ads_by_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Facebook ads by date and store them locally — cc_get_fb_ads_by_date","text":"date vector dates.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ads_daily.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all campaigns for the current ad account / legacy — cc_get_fb_ads_daily","title":"Get all campaigns for the current ad account / legacy — cc_get_fb_ads_daily","text":"details fields, see https://developers.facebook.com/docs/marketing-api/reference/ad-campaign-group/","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ads_daily.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all campaigns for the current ad account / legacy — cc_get_fb_ads_daily","text":"","code":"cc_get_fb_ads_daily(   fields = c(\"spend\"),   level = \"campaign\",   start_date = NULL,   end_date = NULL,   api_version = \"v22.0\",   fb_ad_account_id = NULL,   max_pages = NULL,   fb_user_token = NULL,   cache = TRUE,   update = TRUE )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ads_daily.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all campaigns for the current ad account / legacy — cc_get_fb_ads_daily","text":"fields character vector fields retrieve. Defaults \"spend\".","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ads_daily.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get all campaigns for the current ad account / legacy — cc_get_fb_ads_daily","text":"currently returns fields return single value, `cc_valid_fields_ad_campaign_group_v` reference, fields always present campaigns: \"id,name,created_time,updated_time,start_time,stop_time,objective,status\" Cache updating currently suboptimal.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ads_daily.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all campaigns for the current ad account / legacy — cc_get_fb_ads_daily","text":"","code":"if (FALSE) { # \\dontrun{ cc_get_fb_ads_daily() } # }"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ads_totals_by_day.html","id":null,"dir":"Reference","previous_headings":"","what":"Get total Facebook ad spending per day and as a rolling average — cc_get_fb_ads_totals_by_day","title":"Get total Facebook ad spending per day and as a rolling average — cc_get_fb_ads_totals_by_day","text":"Get total Facebook ad spending per day rolling average","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ads_totals_by_day.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get total Facebook ad spending per day and as a rolling average — cc_get_fb_ads_totals_by_day","text":"","code":"cc_get_fb_ads_totals_by_day(   ads_df = NULL,   start_date = NULL,   end_date = NULL,   before = 3,   after = 3 )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_ads_totals_by_day.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get total Facebook ad spending per day and as a rolling average — cc_get_fb_ads_totals_by_day","text":"ads_df data frame, one retrieved `cc_get_fb_ads()` start_date Defaults 91 days today end_date Defaults yesterday. Defaults 3. Days keep given day calculating rolling averages. Defaults 3. Days keep given day calculating rolling averages.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_leads.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve leads from lead ads — cc_get_fb_leads","title":"Retrieve leads from lead ads — cc_get_fb_leads","text":"Currently cache results.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_leads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve leads from lead ads — cc_get_fb_leads","text":"","code":"cc_get_fb_leads(   form_id,   fields = c(\"created_time\", \"id\", \"campaign_id\", \"campaign_name\", \"adset_id\",     \"adset_name\", \"ad_id\", \"ad_name\", \"form_id\", \"is_organic\", \"platform\", \"field_data\"),   fb_page_token = NULL,   fb_user_token = NULL,   max_pages = NULL,   api_version = \"v22.0\" )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_leads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve leads from lead ads — cc_get_fb_leads","text":"form_id Identifier lead gen form, presumably id 17 digits. fields Defaults `c(\"created_time\", \"id\", \"ad_id\", \"form_id\", \"field_data\")`- fb_page_token Takes precedence `fb_user_token`. See documentation required permissions. fb_user_token Used fallback option `fb_page_token` given. See documentation required permissions. max_pages Maximum number pages retrieve (15 responses included page). Defaults 1000 pages internally. api_version Defaults \"v21.0\".","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_leads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve leads from lead ads — cc_get_fb_leads","text":"data frame","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_leads.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve leads from lead ads — cc_get_fb_leads","text":"Details API: https://developers.facebook.com/docs/marketing-api/guides/lead-ads/retrieving exact meaning fields, see: https://www.facebook.com/business/help/974763215942961?id=735435806665862 Either page user token can given. given, page token used. either case, mindful permission requirements: read ad specific fields, ad_id, campaign_id, need: - Page User access token requested person can advertise ad account Page - ads_management permission - pages_read_engagement permission - pages_show_list permission - pages_manage_metadata permission - using webhooks read lead data ad level data, need: - Page User access token requested person can advertise ad account Page - ads_management permission - leads_retrieval permission - pages_show_list permission - pages_read_engagement permission - pages_manage_ads permission","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_leads.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve leads from lead ads — cc_get_fb_leads","text":"","code":"if (FALSE) { # \\dontrun{ cc_get_fb_leads(form_id = \"12345678912345678\") } # }"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_long_page_token.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a long-lived page acess token for Facebook — cc_get_fb_long_page_token","title":"Get a long-lived page acess token for Facebook — cc_get_fb_long_page_token","text":"details, see https://developers.facebook.com/docs/facebook-login/guides/access-tokens/get-long-lived/","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_long_page_token.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a long-lived page acess token for Facebook — cc_get_fb_long_page_token","text":"","code":"cc_get_fb_long_page_token(   fb_user_id = NULL,   fb_user_token = NULL,   api_version = \"v22.0\" )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_long_page_token.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a long-lived page acess token for Facebook — cc_get_fb_long_page_token","text":"fb_user_id App-scoped user id. can retrieved `cc_get_fb_user()` fb_user_token Must long-lived user token. can retrieved `cc_get_fb_long_user_token()`.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_long_page_token.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a long-lived page acess token for Facebook — cc_get_fb_long_page_token","text":"data frame long-lived access tokens available pages.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_long_page_token.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get a long-lived page acess token for Facebook — cc_get_fb_long_page_token","text":"use input long-lived user access token. Long-lived Page access token expiration date expire invalidated certain conditions.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_long_page_token.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a long-lived page acess token for Facebook — cc_get_fb_long_page_token","text":"","code":"if (FALSE) { # \\dontrun{ if (interactive) {   cc_get_fb_long_page_token(     fb_user_id = \"your_fb_user_id_here\",     fb_user_token = \"your_long_term_token_here\"   ) } } # }"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_long_user_token.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a long-lived user access token for Facebook — cc_get_fb_long_user_token","title":"Get a long-lived user access token for Facebook — cc_get_fb_long_user_token","text":"details, see https://developers.facebook.com/docs/facebook-login/guides/access-tokens/get-long-lived/","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_long_user_token.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a long-lived user access token for Facebook — cc_get_fb_long_user_token","text":"","code":"cc_get_fb_long_user_token(   fb_user_token = NULL,   fb_app_id = NULL,   fb_app_secret = NULL,   api_version = \"v22.0\" )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_long_user_token.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a long-lived user access token for Facebook — cc_get_fb_long_user_token","text":"character vector length one, long-loved user access token.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_long_user_token.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get a long-lived user access token for Facebook — cc_get_fb_long_user_token","text":"use input short-lived user access token. future calls, can routinely use newly aquired long-lived user access token, generally last 60 days.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_long_user_token.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a long-lived user access token for Facebook — cc_get_fb_long_user_token","text":"","code":"if (FALSE) { # \\dontrun{ if (interactive) {   cc_get_fb_long_user_token(     fb_user_token = \"your_short_term_token_here\",     fb_app_id = \"your_fb_app_id_here\",     fb_app_secret = \"your_fb_app_secret_here\"   ) } } # }"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_managed_pages.html","id":null,"dir":"Reference","previous_headings":"","what":"Get managed pages, including name, page token, and id — cc_get_fb_managed_pages","title":"Get managed pages, including name, page token, and id — cc_get_fb_managed_pages","text":"mindful permissions associated current user token: probably need \"pages_show_list\", , pages managed business manger, \"business_management\". get response, problem likely related permissions, try adding permissions relevant.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_managed_pages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get managed pages, including name, page token, and id — cc_get_fb_managed_pages","text":"","code":"cc_get_fb_managed_pages(   fields = c(\"id\", \"name\"),   fb_user_id = NULL,   fb_user_token = NULL,   api_version = \"v22.0\" )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_managed_pages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get managed pages, including name, page token, and id — cc_get_fb_managed_pages","text":"fields Defaults `c(\"id\", \"name\")`. Include \"access_token\" order retrieve Facebook page access token. fb_user_id Facebook user id. Defaults NULL, can set `cc_set()`. Can retrieved `cc_get_fb_user()`. fb_user_token Facebook user token (page token). api_version Defaults \"v21.0\".","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_managed_pages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get managed pages, including name, page token, and id — cc_get_fb_managed_pages","text":"data frame (tibble), many columns fields (default,   `id` `name`).","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_managed_pages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get managed pages, including name, page token, and id — cc_get_fb_managed_pages","text":"","code":"if (FALSE) { # \\dontrun{ cc_get_fb_managed_pages() } # }"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_owned_product_catalogs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get information about your Facebook product catalogs — cc_get_fb_owned_product_catalogs","title":"Get information about your Facebook product catalogs — cc_get_fb_owned_product_catalogs","text":"See relevant page documentation available fields details https://developers.facebook.com/docs/marketing-api/reference/product-catalog","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_owned_product_catalogs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get information about your Facebook product catalogs — cc_get_fb_owned_product_catalogs","text":"","code":"cc_get_fb_owned_product_catalogs(   fb_business_id = NULL,   api_version = \"v22.0\",   fields = c(\"id\", \"business\", \"commerce_merchant_settings\", \"da_display_settings\",     \"default_image_url\", \"fallback_image_url\", \"feed_count\", \"is_catalog_segment\",     \"name\", \"product_count\", \"vertical\"),   token = NULL )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_owned_product_catalogs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get information about your Facebook product catalogs — cc_get_fb_owned_product_catalogs","text":"fb_business_id Facebook business id. details find , see https://www.facebook.com/business/help/1181250022022158 api_version Defaults \"v21.0\". fields Defaults available. token Facebook user token (page token).","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_owned_product_catalogs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get information about your Facebook product catalogs — cc_get_fb_owned_product_catalogs","text":"","code":"if (FALSE) { # \\dontrun{ cc_get_fb_owned_product_catalogs() } # }"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_page_insights.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Facebook page insights — cc_get_fb_page_insights","title":"Get Facebook page insights — cc_get_fb_page_insights","text":"Official documentation: https://developers.facebook.com/docs/graph-api/reference/v22.0/insights","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_page_insights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Facebook page insights — cc_get_fb_page_insights","text":"","code":"cc_get_fb_page_insights(   metric = c(\"page_impressions\"),   start_date = NULL,   end_date = NULL,   api_version = \"v22.0\",   cache = TRUE,   fb_page_id = NULL,   fb_page_token = NULL )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_page_insights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Facebook page insights — cc_get_fb_page_insights","text":"fb_page_token","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_page_post_insights.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Facebook page posts insights — cc_get_fb_page_post_insights","title":"Get Facebook page posts insights — cc_get_fb_page_post_insights","text":"reference, see: https://developers.facebook.com/docs/graph-api/reference/insights/#page-posts defaults Lifetime period post.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_page_post_insights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Facebook page posts insights — cc_get_fb_page_post_insights","text":"","code":"cc_get_fb_page_post_insights(   fb_post_id = NULL,   metrics = cc_valid_fields_fb_post_insights,   cache = TRUE,   update = TRUE,   api_version = \"v22.0\",   fb_page_id = NULL,   fb_page_token = NULL )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_page_post_insights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Facebook page posts insights — cc_get_fb_page_post_insights","text":"fb_page_token","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_page_post_insights.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Facebook page posts insights — cc_get_fb_page_post_insights","text":"Cache yet working.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_page_posts.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Facebook page post id and basic information that can be stored as strings — cc_get_fb_page_posts","title":"Get Facebook page post id and basic information that can be stored as strings — cc_get_fb_page_posts","text":"Find fields effectively means official documentation: https://developers.facebook.com/docs/graph-api/reference/v21.0/page/feed","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_page_posts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Facebook page post id and basic information that can be stored as strings — cc_get_fb_page_posts","text":"","code":"cc_get_fb_page_posts(   api_version = \"v22.0\",   max_pages = NULL,   fields = names(cc_empty_fb_page_post_df),   cache = TRUE,   fb_page_id = NULL,   fb_page_token = NULL )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_page_posts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Facebook page post id and basic information that can be stored as strings — cc_get_fb_page_posts","text":"max_pages Posts returned pages 25 posts . many pages retrieved? default, try retrieve posts. fields Lists fields return data consistently, see `names(cc_empty_fb_page_post_df)` full list official documentation details https://developers.facebook.com/docs/graph-api/reference/v21.0/page/feed. Expect caching work consistently leave value unchanged. Consider disabling caching customise parameter. cache Defaults TRUE.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_page_posts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Facebook page post id and basic information that can be stored as strings — cc_get_fb_page_posts","text":"data frame, sale columns `cc_empty_fb_page_post_df`; column returned data frame class character.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_page_posts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Facebook page post id and basic information that can be stored as strings — cc_get_fb_page_posts","text":"","code":"if (FALSE) { # \\dontrun{ if (interactive) {   fb_page_token <- cc_get_fb_page_token(     fb_user_id = cc_get_fb_user(),     page_name = \"My example page\"   )    cc_set(fb_page_token = fb_page_token)   posts_df <- cc_get_fb_page_posts()   posts_df } } # }"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_page_token.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Facebook page token — cc_get_fb_page_token","title":"Get Facebook page token — cc_get_fb_page_token","text":"Get Facebook page token","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_page_token.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Facebook page token — cc_get_fb_page_token","text":"","code":"cc_get_fb_page_token(   fb_user_id = NULL,   page_id = NULL,   page_name = NULL,   fb_user_token = NULL )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_page_token.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Facebook page token — cc_get_fb_page_token","text":"fb_user_id Facebook used id. known, can retrieved `cc_get_fb_user()`. page_id Exact page id. See `cc_get_fb_managed_pages()` pages access . page_name Exact page name. See `cc_get_fb_managed_pages()` pages access . token User token.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_page_token.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Facebook page token — cc_get_fb_page_token","text":"character vector length one Facebook token.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_page_token.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Facebook page token — cc_get_fb_page_token","text":"","code":"cc_get_fb_page_token(   fb_user_id = cc_get_fb_user(),   page_name = \"My example page\" ) #> Error in cc_get_fb_user(): An active access token must be used to query information about the #> current user."},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_page_video.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Facebook page video id and basic information that can be stored as strings — cc_get_fb_page_video","title":"Get Facebook page video id and basic information that can be stored as strings — cc_get_fb_page_video","text":"See: https://developers.facebook.com/docs/video-api/guides/get-videos/","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_page_video.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Facebook page video id and basic information that can be stored as strings — cc_get_fb_page_video","text":"","code":"cc_get_fb_page_video(   api_version = \"v22.0\",   max_pages = NULL,   cache = TRUE,   fb_page_id = NULL,   fb_page_token = NULL )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_page_video.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Facebook page video id and basic information that can be stored as strings — cc_get_fb_page_video","text":"fb_page_token","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_products.html","id":null,"dir":"Reference","previous_headings":"","what":"Get information about a Facebook catalog products — cc_get_fb_products","title":"Get information about a Facebook catalog products — cc_get_fb_products","text":"Data cached locally.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_products.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get information about a Facebook catalog products — cc_get_fb_products","text":"","code":"cc_get_fb_products(   fb_product_catalog_id = NULL,   fields = cc_valid_fields_fb_product,   api_version = \"v22.0\",   max_pages = NULL,   token = NULL )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_products.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get information about a Facebook catalog products — cc_get_fb_products","text":"data frame. columns include nested data.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_products.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get information about a Facebook catalog products — cc_get_fb_products","text":"","code":"if (FALSE) { # \\dontrun{ cc_get_fb_products() } # }"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_user.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Facebook user id and name, as well as other options fields — cc_get_fb_user","title":"Get Facebook user id and name, as well as other options fields — cc_get_fb_user","text":"details, see: https://developers.facebook.com/docs/graph-api/reference/user/","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_user.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Facebook user id and name, as well as other options fields — cc_get_fb_user","text":"","code":"cc_get_fb_user(   fb_user_token = NULL,   fields = c(\"id\", \"name\"),   format = \"data.frame\" )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_user.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Get Facebook user id and name, as well as other options fields — cc_get_fb_user","text":"Defaults \"data.frame\". \"list\", list returned instead;   useful e.g. \"picture\" field requested.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_user.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Facebook user id and name, as well as other options fields — cc_get_fb_user","text":"fb_user_token Facebook user token (page token).","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_user.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Facebook user id and name, as well as other options fields — cc_get_fb_user","text":"default, data frame one row two character columns,   \"name\" \"id\". Customisable `format` argument.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_user.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Facebook user id and name, as well as other options fields — cc_get_fb_user","text":"","code":"if (FALSE) { # \\dontrun{ cc_get_fb_user() } # }"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_video_insights.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Facebook video insights — cc_get_fb_video_insights","title":"Get Facebook video insights — cc_get_fb_video_insights","text":"reference, see: https://developers.facebook.com/docs/graph-api/reference/video/video_insights/ defaults Lifetime period video","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_video_insights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Facebook video insights — cc_get_fb_video_insights","text":"","code":"cc_get_fb_video_insights(   fb_video_id,   metrics = cc_valid_fields_fb_video_insights,   cache = TRUE,   update = TRUE,   api_version = \"v22.0\",   fb_page_id = NULL,   fb_page_token = NULL )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_fb_video_insights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Facebook video insights — cc_get_fb_video_insights","text":"fb_page_token","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_ga_event_ratio.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the ratio of two Google Analytics events — cc_get_ga_event_ratio","title":"Calculate the ratio of two Google Analytics events — cc_get_ga_event_ratio","text":"Calculate ratio two Google Analytics events","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_ga_event_ratio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the ratio of two Google Analytics events — cc_get_ga_event_ratio","text":"","code":"cc_get_ga_event_ratio(   events,   rolling = FALSE,   rolling_before = 7,   rolling_after = 7,   rolling_period = \"day\",   rolling_complete = FALSE,   start_date = NULL,   end_date = NULL,   ga_email = NULL,   ga_property_id = NULL )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_ga_event_ratio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the ratio of two Google Analytics events — cc_get_ga_event_ratio","text":"events character vector length 2, `c(\"session_start\", \"purchase\")` calculate ratio two events. rolling TRUE, calculates rolling mean number periods (default, days) set `rolling_before` `rolling_after`. rolling_complete Defaults FALSE. TRUE, rolling mean calculated periods fully available. start_date Defaults 91 days today end_date Defaults yesterday. ga_email E-mail addressed associated relevant Google Analytics account, passed `googleAnalyticsR::ga_auth()` ga_property_id Google Analytics property identifier. Find `googleAnalyticsR::ga_account_list(\"ga4\")`.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_ga_event_ratio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the ratio of two Google Analytics events — cc_get_ga_event_ratio","text":"","code":"if (FALSE) { # \\dontrun{ if (interactive) {   cc_get_ga_event_ratio(c(\"session_start\", \"purchase\")) } } # }"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_instagram_bd_user.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve information about a user through Instagram's business discovery — cc_get_instagram_bd_user","title":"Retrieve information about a user through Instagram's business discovery — cc_get_instagram_bd_user","text":"function allows retrieve basic information Instagram account associated , long business account.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_instagram_bd_user.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve information about a user through Instagram's business discovery — cc_get_instagram_bd_user","text":"","code":"cc_get_instagram_bd_user(   ig_username,   fields = c(\"id\", \"ig_id\", \"username\", \"name\", \"biography\", \"website\",     \"followers_count\", \"follows_count\", \"media_count\", \"profile_picture_url\"),   api_version = \"v22.0\",   ig_user_id = NULL,   fb_user_token = NULL )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_instagram_bd_user.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve information about a user through Instagram's business discovery — cc_get_instagram_bd_user","text":"ig_username user name Instagram user. fields Defaults fields publicly available `business_discovery`. See [documentation](https://developers.facebook.com/docs/instagram-platform/reference/instagram-media) fields may available.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_instagram_bd_user.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve information about a user through Instagram's business discovery — cc_get_instagram_bd_user","text":"[details Business Discovery relevant permissions](https://developers.facebook.com/docs/instagram-platform/instagram-graph-api/reference/ig-user/business_discovery/).","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_instagram_bd_user.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve information about a user through Instagram's business discovery — cc_get_instagram_bd_user","text":"","code":"if (FALSE) { # \\dontrun{ if (interactive) {   # e.g. to retrieve information about the Instagram account of the United Nations   cc_get_instagram_bd_user(ig_username = \"unitednations\") } } # }"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_instagram_bd_user_basic.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve identifier of Instagram user — cc_get_instagram_bd_user_basic","title":"Retrieve identifier of Instagram user — cc_get_instagram_bd_user_basic","text":"Mostly used internally consistent storing caching.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_instagram_bd_user_basic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve identifier of Instagram user — cc_get_instagram_bd_user_basic","text":"","code":"cc_get_instagram_bd_user_basic(   ig_username,   cache = TRUE,   api_version = \"v22.0\",   ig_user_id = NULL,   fb_user_token = NULL )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_instagram_bd_user_basic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve identifier of Instagram user — cc_get_instagram_bd_user_basic","text":"ig_username Instagram username Instagram business user.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_instagram_bd_user_basic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve identifier of Instagram user — cc_get_instagram_bd_user_basic","text":"","code":"if (FALSE) { # \\dontrun{ if (interactive) {   # e.g. to retrieve information about the Instagram account of the United Nations   cc_get_instagram_bd_user_basic(ig_username = \"unitednations\") } } # }"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_instagram_bd_user_media.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve information about other users through `business_discovery` — cc_get_instagram_bd_user_media","title":"Retrieve information about other users through `business_discovery` — cc_get_instagram_bd_user_media","text":"Consider information posts creative business users may available. Given restrictions rate limit, likely hit rate limits quite soon. Wait one hour try .","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_instagram_bd_user_media.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve information about other users through `business_discovery` — cc_get_instagram_bd_user_media","text":"","code":"cc_get_instagram_bd_user_media(   ig_username,   fields = c(\"username\", \"timestamp\", \"like_count\", \"comments_count\", \"caption\",     \"media_product_type\", \"media_type\", \"media_url\", \"thumbnail_url\", \"permalink\"),   max_pages = NULL,   wait = 0,   limit = 80,   update = TRUE,   cache = TRUE,   api_version = \"v22.0\",   ig_user_id = NULL,   fb_user_token = NULL )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_instagram_bd_user_media.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve information about other users through `business_discovery` — cc_get_instagram_bd_user_media","text":"ig_username user name Instagram user. fields Defaults fields publicly available `business_discovery`. See [documentation](https://developers.facebook.com/docs/instagram-platform/reference/instagram-media) fields may available. max_pages Posts returned pages 25 posts . many pages retrieved? default, try retrieve posts. wait Defaults zero. Time seconds request API. make small number queries, can leave zero. make even just dozens query, hit API limits unless set wait time. Setting 300 (5 minutes) slow things just enough (yes, means get 25 posts every five minutes, less). limit Defaults 80, meaning 80 three values determining rate limiting reaches least 80 returns collected far. Set NULL ignore. details, see [official documentation](https://developers.facebook.com/docs/graph-api/overview/rate-limiting/). cache Defaults TRUE.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_instagram_bd_user_media.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve information about other users through `business_discovery` — cc_get_instagram_bd_user_media","text":"details rate limits, see [section documentation](https://developers.facebook.com/docs/graph-api/overview/rate-limiting). [details Business Discovery relevant permissions](https://developers.facebook.com/docs/instagram-platform/instagram-graph-api/reference/ig-user/business_discovery/). brief, necessary: - `instagram_basic` - `instagram_manage_insights` - `pages_read_engagement` `pages_show_list` token User whose Page role granted via Business Manager, one following permissions also required: - `ads_management` - `pages_read_engagement` - `business_management`","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_instagram_media.html","id":null,"dir":"Reference","previous_headings":"","what":"Get details about a given Instagram post based on its ig_media_id — cc_get_instagram_media","title":"Get details about a given Instagram post based on its ig_media_id — cc_get_instagram_media","text":"retrieves requested fields APIs introduces adjustments:","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_instagram_media.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get details about a given Instagram post based on its ig_media_id — cc_get_instagram_media","text":"","code":"cc_get_instagram_media(   ig_media_id = NULL,   fields = cc_valid_fields_instagram_media_v,   api_version = \"v22.0\",   ig_user_id = NULL,   update = TRUE,   cache = TRUE,   fb_user_token = NULL )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_instagram_media.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get details about a given Instagram post based on its ig_media_id — cc_get_instagram_media","text":"ig_media_id Instagram media identifier. list identifiers account can retrieved `cc_get_instagram_media_id()`. left NULL, full list automatically retrieved. api_version Defaults \"v21.0\". ig_user_id Instagram user id, typically composed 17 digits. confused legacy Instagram account id. fb_user_token Facebook user token (page token).","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_instagram_media.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get details about a given Instagram post based on its ig_media_id — cc_get_instagram_media","text":"- always include media id, column named `ig_media_id` - field `owner` included, outputs result character vector (one owner, separated ;) - adds `timestamp_retrieved` column, ISO 8601-formatted creation date UTC - ensures output always included requested fields, valid; e.g. `is_shared_to_feed` `media_url` may omitted API (see documentation) function always includes relevant column (returns NA value value given) - valid fields given API endpoint always requested cached locally; requested fields effectively returned (`ig_media_id` `timestamp_retrieved` always included first last column) details, see: https://developers.facebook.com/docs/instagram-api/reference/ig-media","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_instagram_media.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get details about a given Instagram post based on its ig_media_id — cc_get_instagram_media","text":"","code":"if (FALSE) { # \\dontrun{ cc_get_instagram_media() } # }"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_instagram_media_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Get identifiers of all media published on a profile — cc_get_instagram_media_id","title":"Get identifiers of all media published on a profile — cc_get_instagram_media_id","text":"Get identifiers media published profile","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_instagram_media_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get identifiers of all media published on a profile — cc_get_instagram_media_id","text":"","code":"cc_get_instagram_media_id(   ig_user_id = NULL,   api_version = \"v22.0\",   fb_user_token = NULL,   max_pages = NULL,   cache = TRUE )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_instagram_media_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get identifiers of all media published on a profile — cc_get_instagram_media_id","text":"ig_user_id Instagram user id, typically composed 17 digits. confused legacy Instagram account id. api_version Defaults \"v21.0\". fb_user_token Facebook user token (page token). max_pages Defaults NULL. given, retrieves number media calculates max number pages needed. Hard-coded max number pages 1000.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_instagram_media_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get identifiers of all media published on a profile — cc_get_instagram_media_id","text":"tibble one column named `ig_media_id` identifiers Instagram media.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_instagram_media_insights.html","id":null,"dir":"Reference","previous_headings":"","what":"Get insights about a given Instagram post based on its ig_media_id — cc_get_instagram_media_insights","title":"Get insights about a given Instagram post based on its ig_media_id — cc_get_instagram_media_insights","text":"retrieves requested metrics APIs introduces adjustments:","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_instagram_media_insights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get insights about a given Instagram post based on its ig_media_id — cc_get_instagram_media_insights","text":"","code":"cc_get_instagram_media_insights(   ig_media_id = NULL,   metrics = NULL,   api_version = \"v22.0\",   ig_user_id = NULL,   cache = TRUE,   update = TRUE,   fb_user_token = NULL )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_instagram_media_insights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get insights about a given Instagram post based on its ig_media_id — cc_get_instagram_media_insights","text":"ig_media_id Instagram media identifier. list identifiers account can retrieved `cc_get_instagram_media_id()`. left NULL, full list automatically retrieved. api_version Defaults \"v21.0\". ig_user_id Instagram user id, typically composed 17 digits. confused legacy Instagram account id. fb_user_token Facebook user token (page token).","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_instagram_media_insights.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get insights about a given Instagram post based on its ig_media_id — cc_get_instagram_media_insights","text":"- always includes media id, column named `ig_media_id` - always include media type, column named `ig_media_type` - adds `timestamp_retrieved` column, ISO 8601-formatted creation date UTC - ensures output always included requested fields, valid; e.g. `is_shared_to_feed` `media_url` may omitted API (see documentation) function always includes relevant column (returns NA value value given) - valid fields given API endpoint always requested cached locally; requested fields effectively returned (`ig_media_id` `timestamp_retrieved` always included first last column) N.B.: different media types different fields: hence `NA`s columns data unavailable given media type. N.B.: media posted 2017 discarded default, Instagram API throw error earlier posts details, see: https://developers.facebook.com/docs/instagram-api/reference/ig-media/insights","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_instagram_media_insights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get insights about a given Instagram post based on its ig_media_id — cc_get_instagram_media_insights","text":"","code":"if (FALSE) { # \\dontrun{ cc_get_instagram_media_insights() } # }"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_instagram_user.html","id":null,"dir":"Reference","previous_headings":"","what":"Get information about your Instagram user — cc_get_instagram_user","title":"Get information about your Instagram user — cc_get_instagram_user","text":"need retrieve Instagram user id, consider `cc_get_instagram_user_id()`.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_instagram_user.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get information about your Instagram user — cc_get_instagram_user","text":"","code":"cc_get_instagram_user(   ig_user_id = NULL,   api_version = \"v22.0\",   fields = c(\"id\", \"ig_id\", \"username\", \"name\", \"biography\", \"website\",     \"followers_count\", \"follows_count\", \"media_count\", \"profile_picture_url\"),   fb_user_token = NULL )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_instagram_user.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get information about your Instagram user — cc_get_instagram_user","text":"ig_user_id Instagram user id, typically composed 17 digits. confused legacy Instagram account id. api_version Defaults \"v21.0\". fields Defaults available (except \"shopping_product_tag_eligibility\", requires dedicated permissions). Consider reducing relevant permissions. fb_user_token Facebook user token (page token).","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_instagram_user.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get information about your Instagram user — cc_get_instagram_user","text":"data frame (tibble), column id, plus many columns   requested fields.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_instagram_user.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get information about your Instagram user — cc_get_instagram_user","text":"See relevant page documentation available fields details https://developers.facebook.com/docs/instagram-api/reference/ig-user Look particular permissions requirements. issues, consider dropping `shopping_product_tag_eligibility` fields, requires additional permissions.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_instagram_user.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get information about your Instagram user — cc_get_instagram_user","text":"","code":"if (FALSE) { # \\dontrun{ cc_get_instagram_user() } # }"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_instagram_user_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the Instagram user id of a Page's Instagram Business Account — cc_get_instagram_user_id","title":"Get the Instagram user id of a Page's Instagram Business Account — cc_get_instagram_user_id","text":"details, see step 5 guide: https://developers.facebook.com/docs/instagram-api/getting-started/","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_instagram_user_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the Instagram user id of a Page's Instagram Business Account — cc_get_instagram_user_id","text":"","code":"cc_get_instagram_user_id(   fb_page_id = NULL,   fb_user_token = NULL,   api_version = \"v22.0\" )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_instagram_user_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the Instagram user id of a Page's Instagram Business Account — cc_get_instagram_user_id","text":"fb_user_token Facebook user token (page token).","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_linkedin_stats_content.html","id":null,"dir":"Reference","previous_headings":"","what":"Get files with content stats exported from LinkedIn — cc_get_linkedin_stats_content","title":"Get files with content stats exported from LinkedIn — cc_get_linkedin_stats_content","text":"N.B. \"Metrics\" sheet processed, sheets give overall statistics, limited relevant time period.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_linkedin_stats_content.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get files with content stats exported from LinkedIn — cc_get_linkedin_stats_content","text":"","code":"cc_get_linkedin_stats_content(path, page_name, export_csv = FALSE)"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_linkedin_stats_content.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get files with content stats exported from LinkedIn — cc_get_linkedin_stats_content","text":"path Base path xls files exported LinkedIn stored. page_name Name page. unsure exact form, see relevant column `cc_get_linkedin_stats_files()` export_csv Defaults TRUE. TRUE, exports content stats csv file folder name base path, \"_processed\" appended.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_linkedin_stats_content.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get files with content stats exported from LinkedIn — cc_get_linkedin_stats_content","text":"data frame.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_linkedin_stats_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Return a tibble with details about all the stats files exported from LinkedIn Pages — cc_get_linkedin_stats_files","title":"Return a tibble with details about all the stats files exported from LinkedIn Pages — cc_get_linkedin_stats_files","text":"Provide path local folder bunch files names \"pagename_followers_1684688073420.xls\" stored. path scanned recursively tidy data framre returned, including columns name page, type stats included file, well date data exported.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_linkedin_stats_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return a tibble with details about all the stats files exported from LinkedIn Pages — cc_get_linkedin_stats_files","text":"","code":"cc_get_linkedin_stats_files(path)"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_linkedin_stats_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return a tibble with details about all the stats files exported from LinkedIn Pages — cc_get_linkedin_stats_files","text":"path path folder scanned recursively","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_linkedin_stats_followers.html","id":null,"dir":"Reference","previous_headings":"","what":"Get files with follower stats exported from LinkedIn — cc_get_linkedin_stats_followers","title":"Get files with follower stats exported from LinkedIn — cc_get_linkedin_stats_followers","text":"N.B. \"New followers\" sheet processed, sheets give overall statistics, limited relevant time period.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_linkedin_stats_followers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get files with follower stats exported from LinkedIn — cc_get_linkedin_stats_followers","text":"","code":"cc_get_linkedin_stats_followers(path, page_name, export_csv = FALSE)"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_linkedin_stats_followers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get files with follower stats exported from LinkedIn — cc_get_linkedin_stats_followers","text":"path Base path xls files exported LinkedIn stored. page_name Name page. unsure exact form, see relevant column `cc_get_linkedin_stats_files()` export_csv Defaults TRUE. TRUE, exports follower stats csv file folder name base path, \"_processed\" appended.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_linkedin_stats_followers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get files with follower stats exported from LinkedIn — cc_get_linkedin_stats_followers","text":"data frame.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_linkedin_stats_visitors.html","id":null,"dir":"Reference","previous_headings":"","what":"Get files with visitors stats exported from LinkedIn — cc_get_linkedin_stats_visitors","title":"Get files with visitors stats exported from LinkedIn — cc_get_linkedin_stats_visitors","text":"N.B. \"Metrics\" sheet processed, sheets give overall statistics, limited relevant time period.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_linkedin_stats_visitors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get files with visitors stats exported from LinkedIn — cc_get_linkedin_stats_visitors","text":"","code":"cc_get_linkedin_stats_visitors(path, page_name, export_csv = FALSE)"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_linkedin_stats_visitors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get files with visitors stats exported from LinkedIn — cc_get_linkedin_stats_visitors","text":"path Base path xls files exported LinkedIn stored. page_name Name page. unsure exact form, see relevant column `cc_get_linkedin_stats_files()` export_csv Defaults TRUE. TRUE, exports visitors stats csv file folder name base path, \"_processed\" appended.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_linkedin_stats_visitors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get files with visitors stats exported from LinkedIn — cc_get_linkedin_stats_visitors","text":"data frame.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_settings.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve settings for the session. — cc_get_settings","title":"Retrieve settings for the session. — cc_get_settings","text":"Typically set `cc_set()`.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_settings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve settings for the session. — cc_get_settings","text":"","code":"cc_get_settings(   start_date = NULL,   end_date = NULL,   fb_user_token = NULL,   fb_page_token = NULL,   fb_page_id = NULL,   fb_business_id = NULL,   fb_ad_account_id = NULL,   fb_product_catalog_id = NULL,   fb_user_id = NULL,   ig_user_id = NULL,   ga_email = NULL,   ga_property_id = NULL )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_settings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve settings for the session. — cc_get_settings","text":"start_date Nominally defaults NULL, effectively 91 days today. end_date Nominally defaults NULL, effectively yesterday.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_settings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve settings for the session. — cc_get_settings","text":"list named elements.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_get_settings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve settings for the session. — cc_get_settings","text":"","code":"# \\donttest{ if (interactive()) {   dates_l <- cc_get_settings()   dates_l } # }"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_nomnoml.html","id":null,"dir":"Reference","previous_headings":"","what":"Show ad campaign structure in a nomnmonl graph — cc_nomnoml","title":"Show ad campaign structure in a nomnmonl graph — cc_nomnoml","text":"Show ad campaign structure nomnmonl graph","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_nomnoml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show ad campaign structure in a nomnmonl graph — cc_nomnoml","text":"","code":"cc_nomnoml(ads_df, direction = \"right\", drop_vertical_bar = FALSE, ...)"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_nomnoml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show ad campaign structure in a nomnmonl graph — cc_nomnoml","text":"direction Defaults \"right\". Can \"\". Passed `nomnoml`. drop_vertical_bar Defaults FALSE. TRUE, replaces vertical bar (`nomnoml` can used separate block subsections) \"-\". ...","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_read_fb_ads_by_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Reads locally stored dated files, typically generated with `cc_get_fb_ads_by_date` — cc_read_fb_ads_by_date","title":"Reads locally stored dated files, typically generated with `cc_get_fb_ads_by_date` — cc_read_fb_ads_by_date","text":"Reads locally stored dated files, typically generated `cc_get_fb_ads_by_date`","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_read_fb_ads_by_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reads locally stored dated files, typically generated with `cc_get_fb_ads_by_date` — cc_read_fb_ads_by_date","text":"","code":"cc_read_fb_ads_by_date(   path = \"fb_ads_by_date_rds\",   start_date = NULL,   end_date = NULL )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_read_fb_ads_by_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reads locally stored dated files, typically generated with `cc_get_fb_ads_by_date` — cc_read_fb_ads_by_date","text":"path Path dated files start_date Defaults NULL. given, files retrieved date later included. Input date class, YYYY-MM-DD format. end_date Defaults NULL. given, files retrieved date sooner included. Input date class, YYYY-MM-DD format.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_read_fb_ads_by_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reads locally stored dated files, typically generated with `cc_get_fb_ads_by_date` — cc_read_fb_ads_by_date","text":"","code":"if (FALSE) { # \\dontrun{ if (interactive()) {   cc_read_fb_ads_by_date() } } # }"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Set settings and token for the session — cc_set","title":"Set settings and token for the session — cc_set","text":"Set settings token session","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set settings and token for the session — cc_set","text":"","code":"cc_set(   start_date = NULL,   end_date = NULL,   fb_user_token = NULL,   fb_page_token = NULL,   fb_page_id = NULL,   fb_business_id = NULL,   fb_ad_account_id = NULL,   fb_product_catalog_id = NULL,   fb_user_id = NULL,   ig_user_id = NULL,   ga_email = NULL,   ga_property_id = NULL )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set settings and token for the session — cc_set","text":"start_date Defaults 91 days today end_date Defaults yesterday. fb_user_token Facebook user token (page token). fb_business_id Facebook business id. details find , see https://www.facebook.com/business/help/1181250022022158 ga_email E-mail addressed associated relevant Google Analytics account, passed `googleAnalyticsR::ga_auth()` ga_property_id Google Analytics property identifier. Find `googleAnalyticsR::ga_account_list(\"ga4\")`.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set settings and token for the session — cc_set","text":"list named elements.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set settings and token for the session — cc_set","text":"","code":"# \\donttest{ if (interactive()) {   dates_l <- cc_set()   dates_l } # }"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_ui_instagram_user_card.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a card to be used in dashboard or shiny app with basic information about the Instagram account — cc_ui_instagram_user_card","title":"Create a card to be used in dashboard or shiny app with basic information about the Instagram account — cc_ui_instagram_user_card","text":"Create card used dashboard shiny app basic information Instagram account","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_ui_instagram_user_card.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a card to be used in dashboard or shiny app with basic information about the Instagram account — cc_ui_instagram_user_card","text":"","code":"cc_ui_instagram_user_card(   ig_user_df = NULL,   ig_user_id = NULL,   fb_user_token = NULL )"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_ui_instagram_user_card.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a card to be used in dashboard or shiny app with basic information about the Instagram account — cc_ui_instagram_user_card","text":"ig_user_id Instagram user id, typically composed 17 digits. confused legacy Instagram account id. fb_user_token Facebook user token (page token).","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_ui_instagram_user_card.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a card to be used in dashboard or shiny app with basic information about the Instagram account — cc_ui_instagram_user_card","text":"","code":"if (FALSE) { # \\dontrun{ if (interactive) {   cc_ui_instagram_user_card() } } # }"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_valid_fields_ad_insights.html","id":null,"dir":"Reference","previous_headings":"","what":"A list with all valid fields for the Ad Insights Marketing API — cc_valid_fields_ad_insights","title":"A list with all valid fields for the Ad Insights Marketing API — cc_valid_fields_ad_insights","text":"fields requested time, grouped according thematic scope named list. division formalised official API, named list liberally built package author. actual contents fiels immediately obvious clearly described official documentation may misplaced fully tested. Fields may repeated relevant. `ad_id` included lists can used matching.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_valid_fields_ad_insights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A list with all valid fields for the Ad Insights Marketing API — cc_valid_fields_ad_insights","text":"","code":"cc_valid_fields_ad_insights"},{"path":"https://giocomai.github.io/cornucopia/reference/cc_valid_fields_ad_insights.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A list with all valid fields for the Ad Insights Marketing API — cc_valid_fields_ad_insights","text":"## `cc_valid_fields_ad_insights` named list valid fields Ad Insights. about_the_account Retrieves information ad account. separate clearly ad account, probably need request information every call. about_the_ad Retrieves information given ad. Logically, need requested per ad , e.g. daily basis remain unchanged ad. about_the_ad_timing Retrieves information timing given ad, started, ended, etc. also need requested per ad, may need updated ad still running.","code":""},{"path":"https://giocomai.github.io/cornucopia/reference/cc_valid_fields_ad_insights.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A list with all valid fields for the Ad Insights Marketing API — cc_valid_fields_ad_insights","text":"<https://developers.facebook.com/docs/marketing-api/reference/adgroup/insights/>","code":""},{"path":"https://giocomai.github.io/cornucopia/news/index.html","id":"cornucopia-0009000","dir":"Changelog","previous_headings":"","what":"cornucopia 0.0.0.9000","title":"cornucopia 0.0.0.9000","text":"Added NEWS.md file track changes package. Basic functions working Instagram API Systematically update upload LinkedIn exported stats","code":""}]
